@inherits LayoutComponentBase
@inject ProjectService ProjectService
@inject NavigationManager NavigationManager

<RadzenComponents />

@if (isDataLoaded)
{
    <RadzenLayout Style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body'">
        <RadzenHeader>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
                <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                <RadzenLabel Text="Testeger" />
            </RadzenStack>
        </RadzenHeader>
        <RadzenSidebar @bind-Expanded="@sidebarExpanded">
            <RadzenPanelMenu>
                <RadzenPanelMenuItem Text="Home" Icon="home" Path="/" />
                <RadzenPanelMenuItem Text="Profile" Icon="account_box" />

                @if (Projects.Any())
                {
                    <RadzenPanelMenuItem Text="Projects">
                        @foreach (var project in Projects)
                        {
                            <RadzenPanelMenuItem Text="@project.Name" Path="@GetProjectRoute(project.Id)" />
                        }
                    </RadzenPanelMenuItem>
                }
            </RadzenPanelMenu>
        </RadzenSidebar>
        <RadzenBody>
            <div class="rz-p-4">
                @Body
            </div>
        </RadzenBody>
    </RadzenLayout>
}

@code {
    private List<Project> Projects { get; set; }

    bool sidebarExpanded = true;
    private bool isDataLoaded = false;

    private string GetProjectRoute(string projectId) => $"/project/{projectId}";

    protected override async Task OnInitializedAsync()
    {
        Projects = await ProjectService.GetAllProjects();
        NavigationManager.LocationChanged += HandleLocationChanged;
        ProjectService.OnChange += StateHasChanged;
        ProjectService.OnProjectAdded += UpdateProjects;
        ProjectService.OnProjectDeleted += UpdateProjects;
        isDataLoaded = true;

        ProjectService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProjectService.OnChange -= StateHasChanged;
    }

    private async void UpdateProjects()
    {
        Projects = await ProjectService.GetAllProjects();
        StateHasChanged();
    }

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        var relativeUri = NavigationManager.ToBaseRelativePath(e.Location);
        if (relativeUri.StartsWith("project/"))
        {
            var projectId = relativeUri.Split('/')[1];
            StateHasChanged();
        }
    }
}

<style>
    .rz-body {
        background-color: #F8F9FA;
    }

    .rz-dialog-content {
        background-color: #F8F9FA;
    }
</style>