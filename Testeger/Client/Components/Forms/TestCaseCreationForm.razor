@inject DialogService DialogService

<EditForm Model="@testCaseCreationViewModel" OnValidSubmit="@NotifyParent">
    <DataAnnotationsValidator />
    <div class="container-fluid">
        <div class="row mb-3 mt-2">
            <div class="col-5">
                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Title</RadzenText>
                <InputText id="title"
                           class="form-control inputtext"
                           placeholder="Enter a concise title for the test case."
                           @bind-Value="testCaseCreationViewModel.Title" />
                <ValidationMessage For="@(() => testCaseCreationViewModel.Title)" />
            </div>

            <div class="col-3 ms-4">
                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Environment</RadzenText>
                <InputText id="environment"
                           class="form-control inputtext"
                           placeholder="Where the test will be executed."
                           @bind-Value="testCaseCreationViewModel.Environment" />
                <ValidationMessage For="@(() => testCaseCreationViewModel.Environment)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-3">
                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Description</RadzenText>
                <InputTextArea id="description"
                               class="form-control textarea"
                               placeholder="Provide a detailed description of the test case."
                               @bind-Value="testCaseCreationViewModel.Description"/>
                <ValidationMessage For="@(() => testCaseCreationViewModel.Description)" />
            </div>

            <div class="col-3">
                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Pre Conditions</RadzenText>
                <InputTextArea id="preconditions"
                               class="form-control textarea"
                               placeholder="List any conditions that must be met before the test is executed."
                               @bind-Value="testCaseCreationViewModel.PreConditions" />
                <ValidationMessage For="@(() => testCaseCreationViewModel.PreConditions)" />
            </div>

            <div class="col-3">
                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Steps</RadzenText>
                <InputTextArea id="steps"
                               class="form-control textarea"
                               placeholder="Detail each step required to perform the test."
                               @bind-Value="testCaseCreationViewModel.Steps" />
                <ValidationMessage For="@(() => testCaseCreationViewModel.Steps)" />
            </div>

            <div class="col-3">
                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Expected Result</RadzenText>
                <InputTextArea id="expectedresult"
                               class="form-control textarea"
                               placeholder="Describe the expected outcome of the test."
                               @bind-Value="testCaseCreationViewModel.ExpectedResult" />
                <ValidationMessage For="@(() => testCaseCreationViewModel.ExpectedResult)" />
            </div> 
        </div>

        <div class="row mb-3 mt-4 d-flex justify-content-end">
            <div class="col-3 d-flex justify-content-end">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback<TestCase> OnFormSubmitted { get; set; }

    private TestCaseCreationViewModel testCaseCreationViewModel = new();

    private async Task NotifyParent()
    {
        var testCase = GetTestCase();
        DialogService.Close(true);
        await OnFormSubmitted.InvokeAsync(testCase);
        testCaseCreationViewModel = new();
    }

    private TestCase GetTestCase()
    {
        var testCase = new TestCase
            {
                Id = Guid.NewGuid().ToString(),
                Title = testCaseCreationViewModel.Title,
                Status = TestCaseStatus.Pending,
                Details = new TestCaseDetails
                {
                    Description = testCaseCreationViewModel.Description,
                    PreConditions = testCaseCreationViewModel.PreConditions,
                    Steps = testCaseCreationViewModel.Steps,
                    ExpectedResult = testCaseCreationViewModel.ExpectedResult,
                    Environment = testCaseCreationViewModel.Environment
                },
                CreatedDate = DateTime.Now,
                CreatedBy = "Lucas", // Temporary
                NeedCorrection = false
            };

        var history = new TestCaseHistory
            {
                TestCaseId = testCase.Id,
                ChangedByUserId = "CurrentUserId", // Temporary
                OldStatus = null,
                NewStatus = testCase.Status,
                ChangedDate = DateTime.Now
            };

        testCase.History.Add(history);
        testCase.Results.Add(new());

        return testCase;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (string.IsNullOrEmpty(testCaseCreationViewModel.ExpectedResult))
        {
            testCaseCreationViewModel.ExpectedResult = "Given \n" +
                                                       "And \n" +
                                                       "When \n" +
                                                       "And \n" +
                                                       "Then ";
        }

        if (string.IsNullOrEmpty(testCaseCreationViewModel.Steps))
        {
            testCaseCreationViewModel.Steps = "1. \n" +
                                                       "2. \n" +
                                                       "3. \n" +
                                                       "4. \n" +
                                                       "5. ";
        }
    }
}

<style>
    .form-label {
        font-weight: 600;
        color: #333;
    }

    .input {
        border-radius: 5px;
    }

    .btn-primary {
        background-color: var(--rz-primary);
        border-color: var(--rz-primary);
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
        }

    .validation-message {
        color: #dc3545;
        font-size: 0.875em;
    }

    #description {
        resize: none;
        height: 200px;
    }

    #duedate {
        border: 1px solid #ced4da;
        border-radius: .25rem;
    }

    .textarea {
        height: 200px;
        resize: none;
        font-size: 13px;
    }

    .inputtext {
        font-size: 13px;
    }
</style>