@inject DialogService DialogService
@inject IProjectServiceNV ProjectServiceNV
@inject INotificationService NotificationService
@inject IInvitationService InvitationService

<EditForm Model="newProject" OnValidSubmit="NotifyParent">
    <ObjectGraphDataAnnotationsValidator />

    <div class="row mb-4">
        <div class="col-9">
            <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Name</RadzenText>
            <InputText id="name"
                       class="form-control inputtext"
                       placeholder="Enter the project name"
                       @bind-Value="newProject.Name" />
            <ValidationMessage For="@(() => newProject.Name)" class="view-model-validation-msg" />
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12 d-flex justify-content-between align-items-center">
            <div class="d-flex flex-column">
                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3" class="mb-0">Project Members</RadzenText>
                <small style="font-size: 11px;">When creating, you will be automatically assigned the role of project manager.</small>
            </div>

            <RadzenButton
                Icon="add"
                Text="Add member"
                Size="ButtonSize.Small"
                ButtonStyle="ButtonStyle.Primary"
                Click="AddMember"
                Disabled="@(newProject.Users.Count == 5)"
                class="me-4"></RadzenButton>
        </div>
    </div>

    <div class="row mb-2 d-flex flex-column justify-content-start" style="min-height: 250px;">
        @foreach (var user in newProject.Users)
        {
            <div class="row mb-2">
                <div class="col-9 mb-0 pb-0">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">E-mail</RadzenText>
                    <InputText @bind-Value="user.Email" placeholder="E-mail" class="form-control inputtext" />
                    <ValidationMessage For="@(() => user.Email)" class="view-model-validation-msg" />


                </div>
                <div class="col-3 m-0 pb-0">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Role</RadzenText>
                    <RadzenDropDown Data="@GetRoleTypeValues()"
                                     TextProperty="Name"
                                     ValueProperty="Value"
                                     @bind-Value="user.RoleType"
                                     Style="width:100%;"
                                     class="form-control inputtext" />
                    <ValidationMessage For="@(() => user.RoleType)" class="view-model-validation-msg" />
                </div>
            </div> 

        }
    </div>

    <div class="row">
        <div class="col-4">
            <RadzenButton ButtonType="ButtonType.Submit"
                          Text="Create project"
                          Size="ButtonSize.Medium"
                          ButtonStyle="ButtonStyle.Primary" />
        </div>
    </div>

</EditForm>
@code {
    [Parameter]
    public EventCallback<string> OnFormSubmitted { get; set; }

    private ProjectCreationViewModel newProject = new();

    private async Task NotifyParent()
    {
        if (newProject.Users.Any() && HasDuplicateEmails(newProject.Users))
        {
            NotificationService.ShowFailNotification("Could not create project", "You can't add two members with the same email");
            return;
        }

        var response = await ProjectServiceNV.CreateProjectAsync(newProject);

        if (newProject.Users.Any())
        {
            await InvitationService.SendProjectInvitationAsync(newProject.Users, response.Id);
        }

        DialogService.Close(true);
        await OnFormSubmitted.InvokeAsync(response?.Id);
        newProject = new();
    }

    private void AddMember()
    {
        newProject.Users.Add(new UserInvitationViewModel());
    }

    private List<EnumItem<RoleType>> GetRoleTypeValues()
    {
        return Enum.GetValues(typeof(RoleType))
            .Cast<RoleType>()
            .Where(status => status != RoleType.ProjectManager)
            .Select(e => new EnumItem<RoleType> { Value = e, Name = e.ToString() })
            .ToList();
    }

    private bool HasDuplicateEmails(List<UserInvitationViewModel> users)
    {
        var emails = users.Select(u => u.Email).Where(email => !string.IsNullOrWhiteSpace(email)).ToList();
        return emails.Count != emails.Distinct().Count();
    }
}

<style>
    .view-model-validation-msg {
        font-size: 11px !important;
        margin-top: 0.3rem;
        color: red;
    }
</style>
