@using Testeger.Client.ViewModels.TestCases

<h6>Average time a test case spends in each status:</h6>
<RadzenCard>
    @if (areParametersSet)
    {
        <div class="row">
            <div class="col-6">
                <RadzenChart>
                    <RadzenPieSeries Data="@GetPieChartData()" Title="HoursSpent" CategoryProperty="Status" ValueProperty="HoursSpent">
                    </RadzenPieSeries>
                </RadzenChart>
            </div>

            <div class="col-6 d-flex align-items-center">
                <div class="row ms-2">
                    <div class="row card d-flex flex-row p-2 my-1">
                        <div class="col-9 right-divider">
                            <p>Average time spent in the "Pending" Status:</p>
                        </div>
                        <div class="col-3 d-flex justify-content-center">
                            @TestCaseTimeInEachStatus.GetTestCaseTimeByStatus(TestCaseStatus.Pending)
                        </div>
                    </div>

                    <div class="row card d-flex flex-row p-2 my-1">
                        <div class="col-9 right-divider">
                            <p>Average time spent in the "Failed" Status:</p>
                        </div>
                        <div class="col-3 d-flex justify-content-center">
                            @TestCaseTimeInEachStatus.GetTestCaseTimeByStatus(TestCaseStatus.Failed)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</RadzenCard>

@code {
    [Parameter]
    public Dictionary<TestCaseStatus, IEnumerable<TestCaseViewModel>> TestCasesByStatus { get; set; }

    [Parameter]
    public IEnumerable<TestCaseViewModel> TestCases { get; set; }

    [Parameter]
    public DateTime? FilterDate { get; set; }

    private Dictionary<TestCaseStatus, TimeSpan> TestCaseTimeInEachStatus;
    private bool areParametersSet;
    private IEnumerable<TestCaseViewModel> FilteredTestCases { get; set; } = Enumerable.Empty<TestCaseViewModel>();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        FilteredTestCases = FilterTestCasesByDate(TestCases, FilterDate);
        TestCaseTimeInEachStatus = TestCaseMetricsCalculator.CalculateAverageTimeInEachStatus(FilteredTestCases);
        areParametersSet = true;
    }

    private IEnumerable<TestCaseViewModel> FilterTestCasesByDate(IEnumerable<TestCaseViewModel> testCases, DateTime? filterDate)
    {
        if (filterDate == null)
        {
            return testCases;
        }

        return testCases.Where(testCase =>
        {
            var mostRecentChangeDate = testCase.History
                .OrderByDescending(history => history.ChangedDate)
                .FirstOrDefault()?.ChangedDate;

            return mostRecentChangeDate.HasValue && mostRecentChangeDate.Value >= filterDate.Value;
        });
    }

    private class DataItem
    {
        public string? Status { get; set; }
        public double HoursSpent { get; set; }
    }

    private DataItem[] GetPieChartData()
    {
        DataItem[] dataArray = new DataItem[TestCasesByStatus.Count - 1];
        int i = 0;
        foreach (var entry in TestCasesByStatus)
        {
            if (entry.Key != TestCaseStatus.Completed)
            {
                dataArray[i++] = new DataItem
                    {
                        Status = entry.Key.ToString(),
                        HoursSpent = TestCaseTimeInEachStatus.GetTestCaseTimeByStatusForChart(entry.Key),
                    };
            }
        }

        return dataArray;
    }
}
