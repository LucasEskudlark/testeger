@using Testeger.Client.ViewModels.TestCases

<h6>Test case count per status</h6>
<RadzenCard>
    <RadzenChart>
        <RadzenColumnSeries Fills="@(new [] { "#4768BC", "#B90D41", "#00763E" })" Data="@GetChartData()" CategoryProperty="Status" LineType="LineType.Dashed" ValueProperty="TestCaseCount">
            <RadzenSeriesDataLabels Visible="false" />
        </RadzenColumnSeries>
        <RadzenColumnOptions Radius="5" Width="20" />
        <RadzenCategoryAxis Padding="5" />
        <RadzenValueAxis>
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Test Case Count" />
        </RadzenValueAxis>
        <RadzenLegend Visible="false" />
    </RadzenChart>
</RadzenCard>

@code {
    [Parameter]
    public Dictionary<TestCaseStatus, IEnumerable<TestCaseViewModel>> TestCasesByStatus { get; set; }

    [Parameter]
    public DateTime? FilterDate { get; set; }

    private Dictionary<TestCaseStatus, IEnumerable<TestCaseViewModel>> FilteredTestCasesByStatus { get; set; } = new();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        FilteredTestCasesByStatus = FilterTestCasesByDate(TestCasesByStatus, FilterDate);
    }

    private Dictionary<TestCaseStatus, IEnumerable<TestCaseViewModel>> FilterTestCasesByDate(
        Dictionary<TestCaseStatus, IEnumerable<TestCaseViewModel>> testCasesByStatus, DateTime? filterDate)
    {
        if (filterDate == null)
        {
            return testCasesByStatus;
        }

        var filteredTestCasesByStatus = new Dictionary<TestCaseStatus, IEnumerable<TestCaseViewModel>>();

        foreach (var kvp in testCasesByStatus)
        {
            var status = kvp.Key;
            var testCases = kvp.Value;

            var filteredTestCases = testCases.Where(testCase =>
            {
                var mostRecentChangeDate = testCase.History
                    .OrderByDescending(history => history.ChangedDate)
                    .FirstOrDefault()?.ChangedDate;

                return mostRecentChangeDate.HasValue && mostRecentChangeDate.Value >= filterDate.Value;
            });

            filteredTestCasesByStatus[status] = filteredTestCases;
        }

        return filteredTestCasesByStatus;
    }

    private class DataItem
    {
        public string? Status { get; set; }
        public int TestCaseCount { get; set; }
    }

    private DataItem[] GetChartData()
    {
        DataItem[] dataArray = new DataItem[FilteredTestCasesByStatus.Count];
        int i = 0;
        foreach (var entry in FilteredTestCasesByStatus)
        {
            dataArray[i++] = new DataItem
                {
                    Status = entry.Key.ToString(),
                    TestCaseCount = entry.Value.Count(),
                };
        }

        return dataArray;
    }
}
