@inject IUserService UserService

<h6>Distribution of Test Requests by QA Analyst</h6>
<RadzenCard class="py-0">
    <RadzenChart>
        <RadzenDonutSeries Data="@ChartData" CategoryProperty="Analyst" ValueProperty="TestRequestCount" TotalAngle="180" StartAngle="180">
            <ChildContent>
                <RadzenSeriesDataLabels Visible="false" />
            </ChildContent>
            <TitleTemplate>
                <div class="rz-donut-content">
                    <div>Request</div>
                    <div>amount</div>
                </div>
            </TitleTemplate>
        </RadzenDonutSeries>
    </RadzenChart>
</RadzenCard>

@code {
    [Parameter]
    public IEnumerable<TestRequestViewModel>? TestRequests { get; set; }

    [Parameter]
    public string? ProjectId { get; set; }

    private IEnumerable<UserNameIdViewModel>? UsersThatAreQA;
    private DataItem[]? ChartData;
    private const string NonAssignedUserName = "Non Assigned";
    private const string UnknownUserName = "Unknown";


    protected override async Task OnInitializedAsync()
    {
        UsersThatAreQA = await UserService.GetUsersByRoleAsync(ProjectId, AuthorizationRoles.QA);
        ChartData = GetChartData(TestRequests, UsersThatAreQA);
        await base.OnInitializedAsync();
    }

    private class DataItem
    {
        public required string Analyst { get; set; }
        public double TestRequestCount { get; set; }
    }

    private DataItem[] GetChartData(IEnumerable<TestRequestViewModel> testRequests, IEnumerable<UserNameIdViewModel> users)
    {
        var groupedRequests = testRequests
            .GroupBy(tr => tr.UserAssignedId ?? NonAssignedUserName)
            .Select(g => new
            {
                UserId = g.Key,
                Count = (double)g.Count()
            });

        var result = groupedRequests
            .GroupJoin(
                users,
                gr => gr.UserId,
                u => u.UserId,
                (gr, u) => new DataItem
                    {
                        Analyst = u.FirstOrDefault()?.Username ?? (gr.UserId == NonAssignedUserName ? NonAssignedUserName : UnknownUserName),
                        TestRequestCount = gr.Count
                    })
            .ToArray();

        return result;
    }
}
