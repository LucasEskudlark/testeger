@using Testeger.Client.ViewModels.TestRequests

<h6>Average time a request spends in each status:</h6>
<RadzenCard>
    @if (areParametersSet)
    {
        <RadzenChart>
            <RadzenPieSeries Data="@GetPieChartData()" Title="HoursSpent" CategoryProperty="Status" ValueProperty="HoursSpent">
            </RadzenPieSeries>
        </RadzenChart>

        <div class="row card d-flex flex-row p-2 my-1">
            <div class="col-9 right-divider">
                <p>Average time spent in the "Waiting" Status:</p>
            </div>
            <div class="col-3 d-flex justify-content-center">
                @RequestTimeInEachStatus.GetRequestTimeByStatus(RequestStatus.Waiting)
            </div>
        </div>

        <div class="row card d-flex flex-row p-2 my-1">
            <div class="col-9 right-divider">
                <p>Average time spent in the "In Progress" Status:</p>
            </div>
            <div class="col-3 d-flex justify-content-center">
                @RequestTimeInEachStatus.GetRequestTimeByStatus(RequestStatus.InProgress)
            </div>
        </div>

        <div class="row card d-flex flex-row p-2 my-1">
            <div class="col-9 right-divider">
                <p>Average time spent in the "Ready for Test" Status:</p>
            </div>
            <div class="col-3 d-flex justify-content-center">
                @RequestTimeInEachStatus.GetRequestTimeByStatus(RequestStatus.ReadyForTesting)
            </div>
        </div>

        <div class="row card d-flex flex-row p-2 my-1">
            <div class="col-9 right-divider">
                <p>Average time spent in the "Fixing Issues" Status:</p>
            </div>
            <div class="col-3 d-flex justify-content-center">
                @RequestTimeInEachStatus.GetRequestTimeByStatus(RequestStatus.FixingIssues)
            </div>
        </div>
    }
    
</RadzenCard>

@code {
    [Parameter]
    public Dictionary<RequestStatus, IEnumerable<TestRequestViewModel>> TestRequestsByStatus { get; set; }

    [Parameter]
    public IEnumerable<TestRequestViewModel> TestRequests { get; set; }

    [Parameter]
    public DateTime? FilterDate { get; set; }

    private Dictionary<RequestStatus, TimeSpan> RequestTimeInEachStatus;
    private bool areParametersSet;

    private IEnumerable<TestRequestViewModel> FilteredRequests { get; set; } = Enumerable.Empty<TestRequestViewModel>();

    protected override async void OnParametersSet()
    {
        base.OnParametersSet();
        FilteredRequests = FilterTestRequestsByDate(TestRequests, FilterDate);
        RequestTimeInEachStatus = TestRequestMetricsCalculator.CalculateAverageTimeInEachStatus(FilteredRequests);
        areParametersSet = true;
    }

    private IEnumerable<TestRequestViewModel> FilterTestRequestsByDate(
        IEnumerable<TestRequestViewModel> requests, DateTime? filterDate)
    {
        if (filterDate == null)
        {
            return requests;
        }

        return requests.Where(request =>
        {
            var mostRecentChangeDate = request.History
                .OrderByDescending(history => history.ChangedDate)
                .FirstOrDefault()?.ChangedDate;

            return mostRecentChangeDate.HasValue && mostRecentChangeDate.Value >= filterDate.Value;
        });
    }

    private class DataItem
    {
        public string? Status { get; set; }
        public double HoursSpent { get; set; }
    }

    private DataItem[] GetPieChartData()
    {
        DataItem[] dataArray = new DataItem[TestRequestsByStatus.Count - 1];
        int i = 0;
        foreach (var entry in TestRequestsByStatus)
        {
            if (entry.Key != RequestStatus.Completed)
            {
                dataArray[i++] = new DataItem
                    {
                        Status = entry.Key.ToString(),
                        HoursSpent = RequestTimeInEachStatus.GetRequestTimeByStatusForChart(entry.Key),
                    };
            }
        }

        return dataArray;
    }
}