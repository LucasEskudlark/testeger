@inject IUserService UserService

<h6>Distribution of Test Cases by QA Analyst</h6>
<RadzenCard class="py-0">
    <RadzenChart>
        <RadzenDonutSeries Data="@ChartData" CategoryProperty="Analyst" ValueProperty="TestCaseCount" TotalAngle="180" StartAngle="0">
            <ChildContent>
                <RadzenSeriesDataLabels Visible="false" />
            </ChildContent>
            <TitleTemplate>
                <div class="rz-donut-content">
                    <div>Test Case</div>
                    <div>amount</div>
                </div>
            </TitleTemplate>
        </RadzenDonutSeries>
    </RadzenChart>
</RadzenCard>

@code {
    [Parameter]
    public IEnumerable<TestCaseViewModel>? TestCases { get; set; }

    [Parameter]
    public string? ProjectId { get; set; }

    private IEnumerable<UserNameIdViewModel>? UsersThatAreQA;
    private DataItem[]? ChartData;
    private const string UnknownUserName = "Not created by QA";

    protected override async Task OnInitializedAsync()
    {
        UsersThatAreQA = await UserService.GetUsersByRoleAsync(ProjectId, AuthorizationRoles.QA);
        ChartData = GetChartData(TestCases, UsersThatAreQA);
        await base.OnInitializedAsync();
    }

    private class DataItem
    {
        public required string Analyst { get; set; }
        public double TestCaseCount { get; set; }
    }

    private DataItem[] GetChartData(IEnumerable<TestCaseViewModel> testCases, IEnumerable<UserNameIdViewModel> users)
    {
        var userIdToName = users.ToDictionary(
        u => u.UserId,
        u => u.Username,
        StringComparer.OrdinalIgnoreCase
        );

        var result = testCases
            .GroupBy(tr =>
                userIdToName.TryGetValue(tr.CreatedByUserId ?? string.Empty, out var name)
                    ? name
                    : UnknownUserName,
                StringComparer.OrdinalIgnoreCase)
            .Select(g => new DataItem
                {
                    Analyst = g.Key,
                    TestCaseCount = g.Count()
                })
            .ToArray();

        return result;
    }
}
