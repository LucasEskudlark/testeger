@inject IUserService UserService

<div class="row">
    <div class="col-4">
        <p>Select member</p>
        <RadzenDropDown Data="@UsersThatAreQA"
                        TextProperty="Username"
                        ValueProperty="UserId"
                        @bind-Value="@SelectedUserId" />
    </div>
</div>

<div class="row d-flex justify-content-evenly mx-0 px-0 mt-3">
    <div class="col-6">
        <RequestAmountByStatusPerQAAnalystChart TestRequests="@TestRequests" UserId="@SelectedUserId" />
    </div>
    <div class="col-6 pb-0">
        <TestCaseAmountByStatusPerQAAnalystChart TestCases="@TestCases" UserId="@SelectedUserId"/>
    </div>
</div>
<div class="row mt-3 d-flex justify-content-center mx-0 px-0">
    <div class="col-12">
        <QAAnalystIndividualMetricsTable />
    </div>
</div>

@code{
    [Parameter]
    public IEnumerable<TestRequestViewModel>? TestRequests { get; set; }

    [Parameter]
    public IEnumerable<TestCaseViewModel>? TestCases { get; set; }

    [Parameter]
    public required string ProjectId { get; set; }

    private string? SelectedUserId { get; set; }
    private IEnumerable<UserNameIdViewModel>? UsersThatAreQA;
    

    protected override async Task OnParametersSetAsync()
    {
        UsersThatAreQA = await UserService.GetUsersByRoleAsync(ProjectId, AuthorizationRoles.QA);

        await base.OnInitializedAsync();
    }
}