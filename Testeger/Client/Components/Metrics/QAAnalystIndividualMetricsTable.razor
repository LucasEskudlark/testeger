@using System.Linq;

@if (areParametersSet)
{
    <RadzenCard>
        <div class="row card d-flex flex-row p-2 my-1">
            <div class="col-9 right-divider">
                <p>Average time to complete a test request:</p>
            </div>
            <div class="col-3 d-flex justify-content-center">
                @AverageTimeToCompleteTestRequest.ToHoursAndMinutes()
            </div>
        </div>

        <div class="row card d-flex flex-row p-2 my-1">
            <div class="col-9 right-divider">
                <p>Average time to complete a test case:</p>
            </div>
            <div class="col-3 d-flex justify-content-center">
                @AverageTimeToCompleteTestCase.ToHoursAndMinutes()
            </div>
        </div>

        <div class="row card d-flex flex-row p-2 my-1">
            <div class="col-9 right-divider">
                <p>Average time to test a test case:</p>
            </div>
            <div class="col-3 d-flex justify-content-center">
                @AverageTimeToTestATestCase.ToHoursAndMinutes()
            </div>
        </div>

    </RadzenCard>
}

@code {
    [Parameter]
    public IEnumerable<TestCaseViewModel>? TestCases { get; set; }
    [Parameter]
    public required IEnumerable<TestRequestViewModel> TestRequests { get; set; }
    [Parameter]
    public required string UserId { get; set; }

    private IEnumerable<TestRequestViewModel>? UserTestRequests { get; set; }
    private IEnumerable<TestCaseViewModel>? UserTestCases { get; set; }
    private bool areParametersSet;

    private double AverageTimeToCompleteTestRequest;
    private double AverageTimeToCompleteTestCase;
    private double AverageTimeToTestATestCase;

    protected override async Task OnParametersSetAsync()
    {
        UserTestRequests = GetUserRequests();
        UserTestCases = GetUserTestCases();
        AverageTimeToCompleteTestRequest = TestRequestMetricsCalculator.CalculateAverageTestRequestCompletionTimeInHours(UserTestRequests);
        AverageTimeToCompleteTestCase = TestCaseMetricsCalculator.CalculateAverageTestCaseCompletionTimeInHours(UserTestCases);
        AverageTimeToTestATestCase = TestCaseMetricsCalculator.CalculateAverageTestCaseTestingTimeInHours(UserTestCases);
        areParametersSet = true;
        await base.OnParametersSetAsync();
    }

    private IEnumerable<TestCaseViewModel> GetUserTestCases()
    {
        if (TestCases == null)
        {
            return Enumerable.Empty<TestCaseViewModel>();
        }

        if (string.IsNullOrEmpty(UserId))
        {
            return Enumerable.Empty<TestCaseViewModel>();
        }

        return TestCases.Where(r => string.Equals(r.CreatedByUserId, UserId, StringComparison.OrdinalIgnoreCase));
    }

    private IEnumerable<TestRequestViewModel> GetUserRequests()
    {
        if (TestRequests == null)
        {
            return Enumerable.Empty<TestRequestViewModel>();
        }

        if (string.IsNullOrEmpty(UserId))
        {
            return Enumerable.Empty<TestRequestViewModel>();
        }

        return TestRequests.Where(r => string.Equals(r.UserAssignedId, UserId, StringComparison.OrdinalIgnoreCase));
    }
}
