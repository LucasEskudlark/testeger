@using System.Linq;
@using Testeger.Client.ViewModels.TestCases;
@using Testeger.Client.ViewModels.TestRequests;

<h6>Test case general numbers</h6>
<RadzenCard>
    <div class="row card d-flex flex-row p-2 my-1">
        <div class="col-9 right-divider">
            <p>Total amount of test cases:</p>
        </div>
        <div class="col-3 d-flex justify-content-center">
            @FilteredTestCases.Count()
        </div>
    </div>

    <div class="row card d-flex flex-row p-2 my-1">
        <div class="col-9 right-divider">
            <p>Average n° of test cases per test request:</p>
        </div>
        <div class="col-3 d-flex justify-content-center">
            @CalculateAverageNumberOfTestCasesPerRequest()
        </div>
    </div>

    <div class="row card d-flex flex-row p-2 my-1">
        <div class="col-9 right-divider">
            <p>N° of test cases that failed at least once:</p>
        </div>
        <div class="col-3 d-flex justify-content-center">
            @TestCaseMetricsCalculator.CountFailedTestCases(FilteredTestCases)
        </div>
    </div>

    <div class="row card d-flex flex-row p-2 my-1">
        <div class="col-9 right-divider">
            <p>N° of test cases that did not fail:</p>
        </div>
        <div class="col-3 d-flex justify-content-center">
            @TestCaseMetricsCalculator.CountNeverFailedTestCases(FilteredTestCases)
        </div>
    </div>

    <div class="row card d-flex flex-row p-2 my-1">
        <div class="col-9 right-divider">
            <p>Average time to complete a test case:</p>
        </div>
        <div class="col-3 d-flex justify-content-center">
            @TestCaseMetricsCalculator.CalculateAverageTestCaseCompletionTimeInHours(FilteredTestCases).ToHoursAndMinutes()
        </div>
    </div>

    <div class="row card d-flex flex-row p-2 my-1">
        <div class="col-9 right-divider">
            <p>Average time to test a test case:</p>
        </div>
        <div class="col-3 d-flex justify-content-center">
            @TestCaseMetricsCalculator.CalculateAverageTestCaseTestingTimeInHours(FilteredTestCases).ToHoursAndMinutes()
        </div>
    </div>

</RadzenCard>

@code {
    [Parameter]
    public IEnumerable<TestCaseViewModel> TestCases { get; set; }

    [Parameter]
    public IEnumerable<TestRequestViewModel> TestRequests { get; set; }

    [Parameter]
    public DateTime? FilterDate { get; set; }

    private IEnumerable<TestCaseViewModel> FilteredTestCases { get; set; } = Enumerable.Empty<TestCaseViewModel>();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        FilteredTestCases = TestCaseMetricsCalculator.FilterTestCasesByDate(TestCases, FilterDate);
    }

    private double CalculateAverageNumberOfTestCasesPerRequest()
    {
        if (!TestRequests.Any())
        {
            return 0.0;
        }

        double averageCount = (double)FilteredTestCases.Count() / TestRequests.Count();
        return Math.Round(averageCount, 2);
    }
}
