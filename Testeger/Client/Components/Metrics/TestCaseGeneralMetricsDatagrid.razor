@using System.Linq;
@using Testeger.Client.ViewModels.TestCases;
@using Testeger.Client.ViewModels.TestRequests;

<h6>Test case general numbers</h6>
<RadzenCard>
    <div class="row card d-flex flex-row p-2 my-1">
        <div class="col-9 right-divider">
            <p>Total amount of test cases:</p>
        </div>
        <div class="col-3 d-flex justify-content-center">
            @FilteredTestCases.Count()
        </div>
    </div>

    <div class="row card d-flex flex-row p-2 my-1">
        <div class="col-9 right-divider">
            <p>Average n° of test cases per test request:</p>
        </div>
        <div class="col-3 d-flex justify-content-center">
            @CalculateAverageNumberOfTestCasesPerRequest()
        </div>
    </div>

    <div class="row card d-flex flex-row p-2 my-1">
        <div class="col-9 right-divider">
            <p>N° of test cases that failed at least once:</p>
        </div>
        <div class="col-3 d-flex justify-content-center">
            @CountFailedTestCases(FilteredTestCases)
        </div>
    </div>

    <div class="row card d-flex flex-row p-2 my-1">
        <div class="col-9 right-divider">
            <p>N° of test cases that did not fail:</p>
        </div>
        <div class="col-3 d-flex justify-content-center">
            @CountNeverFailedTestCases(FilteredTestCases)
        </div>
    </div>

    <div class="row card d-flex flex-row p-2 my-1">
        <div class="col-9 right-divider">
            <p>Average time to complete a test case:</p>
        </div>
        <div class="col-3 d-flex justify-content-center">
            @CalculateAverageTestCaseCompletionTimeInHours(FilteredTestCases).ToHoursAndMinutes()
        </div>
    </div>

    <div class="row card d-flex flex-row p-2 my-1">
        <div class="col-9 right-divider">
            <p>Average time to test a test case:</p>
        </div>
        <div class="col-3 d-flex justify-content-center">
            @CalculateAverageTestCaseTestingTimeInHours(FilteredTestCases).ToHoursAndMinutes()
        </div>
    </div>

</RadzenCard>

@code {
    [Parameter]
    public IEnumerable<TestCaseViewModel> TestCases { get; set; }

    [Parameter]
    public IEnumerable<TestRequestViewModel> TestRequests { get; set; }

    [Parameter]
    public DateTime? FilterDate { get; set; }

    private IEnumerable<TestCaseViewModel> FilteredTestCases { get; set; } = Enumerable.Empty<TestCaseViewModel>();

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        FilteredTestCases = FilterTestCasesByDate(TestCases, FilterDate);
    }

    private IEnumerable<TestCaseViewModel> FilterTestCasesByDate(IEnumerable<TestCaseViewModel> testCases, DateTime? filterDate)
    {
        if (filterDate == null)
        {
            return testCases;
        }

        return testCases.Where(testCase =>
        {
            var mostRecentChangeDate = testCase.History
                .OrderByDescending(history => history.ChangedDate)
                .FirstOrDefault()?.ChangedDate;

            return mostRecentChangeDate.HasValue && mostRecentChangeDate.Value >= filterDate.Value;
        });
    }

    private double CalculateAverageTestCaseCompletionTimeInHours(IEnumerable<TestCaseViewModel> testCases)
    {
        var completedTestCases = testCases.Where(r => r.CompletedDate != default);

        if (!completedTestCases.Any())
        {
            return 0.0;
        }

        double totalHours = completedTestCases
            .Select(r => (r.CompletedDate - r.CreatedDate).TotalHours)
            .Sum();

        double averageHours = totalHours / completedTestCases.Count();

        return Math.Round(averageHours, 2);
    }

    private double CalculateAverageTestCaseTestingTimeInHours(IEnumerable<TestCaseViewModel> testCases)
    {
        var testedTestCases = testCases.Where(r => r.Results.Count() > 1);

        if (!testedTestCases.Any())
        {
            return 0.0;
        }

        var allTimeSpans = testCases
            .SelectMany(tc => tc.Results)
            .Select(tcr => tcr.ElapsedTime)
            .ToList();

        var totalHoursSpent = allTimeSpans.Sum(ts => ts.TotalHours);

        double averageHours = totalHoursSpent / allTimeSpans.Count;

        return Math.Round(averageHours, 2);
    }

    private double CalculateAverageNumberOfTestCasesPerRequest()
    {
        if (!TestRequests.Any())
        {
            return 0.0;
        }

        double averageCount = (double)FilteredTestCases.Count() / TestRequests.Count();
        return Math.Round(averageCount, 2);
    }

    private static int CountFailedTestCases(IEnumerable<TestCaseViewModel> testCases)
    {
        int count = testCases.Count(tc => tc.History.Any(h => h.NewStatus == TestCaseStatus.Failed));
        return count;
    }

    private static int CountNeverFailedTestCases(IEnumerable<TestCaseViewModel> testCases)
    {
        int count = testCases.Count(tc => !tc.History.Any(h => h.NewStatus == TestCaseStatus.Failed));
        return count;
    }
}
