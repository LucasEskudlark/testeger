@page "/test-case/{TestCaseId}/testing"
@inject DialogService DialogService
@inject TestCaseService TestCaseService

@if (TestCase is not null)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12 d-flex justify-content-center mb-3">
                <small class="description-text"><i>Keep in mind that once the timer starts, there is no way to reset it.</i></small>
            </div>
        </div>
        <div class="row py-2">
            <div class="col-6 p2">
                <div class="row">
                    <div class="col-7">
                        <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">ExpectedResult</RadzenText>
                        <RadzenTextArea Disabled="true" @bind-Value="TestCase.Details.ExpectedResult" Style="width:100%; height: 100px; resize: none;" />
                    </div>
                    <div class="col-5">
                        <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Environment</RadzenText>
                        <RadzenTextBox Disabled="true" @bind-Value="TestCase.Details.Environment" Style="width:100%;" />
                    </div>
                </div>
            </div>

            <div class="col-6 p2">
                <StopWatch TestCase="TestCase" OnStopwatchStopped="HandleStopwatchStopped" />
            </div>
        </div>

        <div class="row mt-2 mb-0">
            <div class="col-12 d-flex justify-content-center mb-0">
                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3">Test Results</RadzenText>
            </div>
        </div>

        <div class="row pb-2">
            <div class="col-7 p2">
                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Actual Result</RadzenText>
                <RadzenTextArea @bind-Value="TestCase.Results.ActualResult"
                                Style="width:100%; height: 150px; resize: none;"
                                Placeholder="Describe the test results with as much details as possible."/>
            </div>

            <div class="col-5 p2 d-flex flex-column align-items-center justify-content-center">
                <RadzenButton Icon="upload_file"
                              Text="Add evidence"
                              ButtonStyle="ButtonStyle.Primary"
                              Size="ButtonSize.Small" />
                <small class="mt-2 text-center description-text">Add the necessary evidence in the form of images to prove the test result.</small>
            </div>
        </div>

        <div class="row mt-5">
            <div class="col-7 p2 d-flex align-items-center my-0">
                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Was the test successful?</RadzenText>
                <RadzenDropDown Data="@TestResultOptions"
                                @bind-Value="TestResult" Style="width:30%; margin-left: 10px;" />
            </div>

            <div class="col-5 p2 d-flex justify-content-end">
                @if (TestResult != null && TestCase.Results.ActualResult != null)
                {
                    <RadzenButton Icon="check"
                                  Text="Finish test"
                                  ButtonStyle="ButtonStyle.Success"
                                  Size="ButtonSize.Small"
                                  Click="HandleTestFinished" />
                } else
                {
                    <RadzenButton Icon="check"
                                  Text="Finish test"
                                  ButtonStyle="ButtonStyle.Success"
                                  Size="ButtonSize.Small"
                                  Disabled="true"
                                  Click="HandleTestFinished" />
                }
                
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string TestCaseId { get; set; }

    private TestCase TestCase { get; set; }

    private List<String> TestResultOptions = new List<string> { "Yes", "No" };
    private string TestResult { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        TestCase = await TestCaseService.GetTestCaseById(TestCaseId);

        TestCaseService.OnChange += StateHasChanged;
    }

    private void HandleStopwatchStopped()
    {
        StateHasChanged(); 
    }

    private async Task HandleTestFinished()
    {
        SetTestCaseStatus(TestResult);
        TestCase.AmountOfTimeSpentToTest = CalculateTotalTime();
        await TestCaseService.UpdateTestCase(TestCase);
        DialogService.Close();
    }

    private void SetTestCaseStatus(string testResult)
    {
        if (testResult.Equals("No"))
        {
            TestCase.Status = TestCaseStatus.Failed;
            TestCase.History.Add(GetTestCaseHistory(TestCaseStatus.Failed));
            TestCase.NeedCorrection = true;
            return;
        }

        TestCase.Status = TestCaseStatus.Completed;
        TestCase.History.Add(GetTestCaseHistory(TestCaseStatus.Completed));
        TestCase.CompletedDate = DateTime.Now;
    }

    private TestCaseHistory GetTestCaseHistory(TestCaseStatus newStatus)
    {
        return new TestCaseHistory
            {
                TestCaseId = TestCase.Id,
                ChangedByUserId = "CurrentUserId", // Temporary
                OldStatus = TestCase.Status,
                NewStatus = newStatus,
                ChangedDate = DateTime.Now
            };
    }

    private TimeSpan CalculateTotalTime()
    {
        TimeSpan total = TimeSpan.Zero;
        foreach (var time in TestCase.SavedTimes)
        {
            if (TimeSpan.TryParse(time, out var parsedTime))
            {
                total = total.Add(parsedTime);
            }
        }
        return total;
    }
}