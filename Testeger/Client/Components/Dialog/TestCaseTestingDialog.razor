@page "/test-case/{TestCaseId}/testing"
@inject DialogService DialogService
@inject ITestCaseServiceNV TestCaseService
@inject ITestCaseResultService TestCaseResultService
@inject IImageService ImageService

@if (isInitialized)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12 d-flex justify-content-center mb-3">
                <small class="description-text"><i>Keep in mind that once the timer starts, there is no way to reset it.</i></small>
            </div>
        </div>
        <div class="row py-2">
            <div class="col-8 p2">
                <div class="row">
                    <div class="col-7">
                        <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">ExpectedResult</RadzenText>
                        <RadzenTextArea Disabled="true" @bind-Value="TestCase.Details.ExpectedResult" Style="width:100%; height: 130px; resize: none;" />
                    </div>
                    <div class="col-5">
                        <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Environment</RadzenText>
                        <RadzenTextBox Disabled="true" @bind-Value="TestCase.Details.Environment" Style="width:100%;" />
                    </div>
                </div>
            </div>

            <div class="col-4 p2">
                <StopWatch TestCaseResult="LatestTestCaseResult" OnStopwatchStopped="HandleStopwatchStopped" />
            </div>
        </div>

        <div class="row mt-2 mb-0">
            <div class="col-12 d-flex justify-content-center mb-0">
                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H3">Test Results</RadzenText>
            </div>
        </div>

        <div class="row pb-2">
            <div class="col-7 p2">
                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Actual Result</RadzenText>
                <RadzenTextArea @bind-Value="LatestTestCaseResult.ActualResult"
                                Style="width:100%; height: 150px; resize: none;"
                                Placeholder="Describe the test results with as much details as possible."/>
            </div>

            <div class="col-5 p2 d-flex flex-column align-items-center justify-content-center">
                <small class="mt-2 description-text">Add the necessary evidence in the form of images to prove the test result.</small>
                <div class="file-upload-wrapper mt-2">
                    <label for="fileInput" class="file-upload-label">
                        <RadzenIcon Icon="upload_file" Style="height: 0.8rem !important;" />
                        Add evidence
                    </label>
                    <InputFile id="fileInput" class="file-upload-input" hidden OnChange="@OnInputFileChange" multiple accept=".png,.jpg,.jpeg" />
                </div>
                <small class="mt-1 text-center description-text" style="font-size: 0.7rem !important;">@FileSelectionMessage</small>
            </div>
        </div>

        <div class="row mt-5">
            <div class="col-6 p2 d-flex align-items-center my-0">
                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Was the test successful?</RadzenText>
                <RadzenDropDown Data="@TestResultOptions"
                                @bind-Value="TestResult" Style="width:30%; margin-left: 10px;" />
            </div>

            <div class="col-6 p2 d-flex justify-content-end">
                <RadzenButton Icon="save"
                              Text="Save progress"
                              ButtonStyle="ButtonStyle.Primary"
                              Size="ButtonSize.ExtraSmall"
                              Click="HandleTestSaved"
                              class="mx-2"/>

                @if (TestResult != null && LatestTestCaseResult.ActualResult != null)
                {
                    <RadzenButton Icon="check"
                                  Text="Finish test"
                                  ButtonStyle="ButtonStyle.Success"
                                  Size="ButtonSize.ExtraSmall"
                                  Click="HandleTestFinished"
                                  class="mx-2" />
                }
                else
                {
                    <RadzenButton Icon="check"
                                  Text="Finish test"
                                  ButtonStyle="ButtonStyle.Success"
                                  Size="ButtonSize.ExtraSmall"
                                  Disabled="true"
                                  Click="HandleTestFinished"
                                  class="mx-2"  />
                }
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public EventCallback OnTestFinished { get; set; }
    [Parameter]
    public EventCallback OnTestSaved { get; set; }
    [Parameter]
    public TestCaseViewModel TestCase { get; set; }
    [Parameter]
    public TestCaseResultViewModel LatestTestCaseResult { get; set; }

    private List<String> TestResultOptions = new List<string> { "Yes", "No" };
    private string TestResult { get; set; }
    IEnumerable<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private string FileSelectionMessage = "Nenhum arquivo selecionado";

    private bool isInitialized;

    protected override async Task OnInitializedAsync()
    {

        TestCaseService.OnChange += StateHasChanged;
        await base.OnInitializedAsync();
        isInitialized = true;
    }

    void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        StateHasChanged();
        FileSelectionMessage = $"{selectedFiles.Count()} arquivo(s) selecionado(s)";
    }

    private void HandleStopwatchStopped()
    {
        StateHasChanged(); 
    }

    private async Task HandleTestFinished()
    {
        LatestTestCaseResult.IsSuccess = SetTestResult();
        LatestTestCaseResult.IsFinished = true;
        var creationResult = await TestCaseResultService.HandleTestFinished(LatestTestCaseResult);

        var uploadResult = selectedFiles.Any() ? await ImageService.UploadImageAsync(selectedFiles, creationResult.Id) : false;

        if (!uploadResult)
        {
            return;
        }

        await OnTestFinished.InvokeAsync();
        DialogService.Close();
    }

    private async Task HandleTestSaved()
    {
        await TestCaseResultService.HandleTestFinished(LatestTestCaseResult);
        await OnTestSaved.InvokeAsync();
        DialogService.Close();
    }

    private bool SetTestResult()
    {
        if (TestResult.Equals("Yes"))
        {
            return true;
        }

        return false;
    }
}

<style>
    .rz-dialog{
        padding-bottom: 0px;
    }
</style>

<style>
    .file-upload-wrapper {
        display: inline-block;
        position: relative;
    }

    .file-upload-label {
        background-color: var(--rz-primary); /* Radzen primary color */
        color: white;
        padding: 6px 12px;
        border-radius: 5px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px; /* Space between icon and text */
        font-size: 13px;
        font-weight: bold;
    }

    .file-upload-input {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }
</style>