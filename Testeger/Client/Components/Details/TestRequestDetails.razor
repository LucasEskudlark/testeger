@using Testeger.Client.ViewModels.TestRequests
@inject TooltipService TooltipService
@inject DialogService DialogService
@inject ITestRequestServiceNV TestRequestService
@inject IUserService UserService

<EditForm Model="@Request" OnValidSubmit="HandleValidSubmit" @ref="_editForm">
    <DataAnnotationsValidator />
    <RadzenContent>
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-8 mb-3">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Title</RadzenText>
                    <RadzenTextBox @bind-Value="Request.Title" Style="width:100%;" Disabled="@(!IsManagerOrQA)" />
                    <ValidationMessage For="@(() => Request.Title)" class="view-model-validation-msg" />
                </div>
                <div class="col-md-4 mb-3">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Assigned to</RadzenText>
                    <RadzenDropDown Data="@UsersThatAreQA"
                                    TextProperty="Username"
                                    ValueProperty="UserId"
                                    @bind-Value="@Request.UserAssignedId"
                                    Style="width:100%;"
                                    Disabled="@(!IsManagerOrQA)" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-12">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Description</RadzenText>
                    <RadzenTextArea @bind-Value="Request.Description" Style="width:100%; height:170px; resize: none;" Disabled="@(!IsManagerOrQA)" />
                    <ValidationMessage For="@(() => Request.Description)" class="view-model-validation-msg" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-12">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Story Link</RadzenText>
                    <RadzenTextBox @bind-Value="Request.StoryLink" Style="width:100%;" Disabled="@(!IsManagerOrQA)" />
                    <ValidationMessage For="@(() => Request.StoryLink)" class="view-model-validation-msg" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Status</RadzenText>
                    <RadzenDropDown Data="@GetRequestStatusValues()"
                                    TextProperty="Name"
                                    ValueProperty="Value"
                                    @bind-Value="Request.Status"
                                    Style="width:100%;"
                                    Disabled="@(!IsManagerOrQA)" />
                    <ValidationMessage For="@(() => Request.Status)" class="view-model-validation-msg" />
                </div>
                <div class="col-md-4">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Priority</RadzenText>
                    <RadzenDropDown Data="@GetPriorityLevelValues()"
                                    TextProperty="Name"
                                    ValueProperty="Value"
                                    @bind-Value="Request.PriorityLevel"
                                    Style="width:100%;"
                                    Disabled="@(!IsManagerOrQA)" />
                    <ValidationMessage For="@(() => Request.PriorityLevel)" class="view-model-validation-msg" />
                </div>
                <div class="col-md-4">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Created By</RadzenText>
                    <RadzenTextBox Disabled="true" @bind-Value="CreatedByUserName" Style="width:100%;" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Due Date</RadzenText>
                    <RadzenDatePicker @bind-Value="Request.DueDate"
                                      Style="width:100%;" Min="@(DateTime.Today)"
                                      DateFormat="dd/MM/yyyy"
                                      Disabled="@(!IsManagerOrQA)" />
                    <ValidationMessage For="@(() => Request.DueDate)" class="view-model-validation-msg" />
                </div>
                <div class="col-md-4">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Created Date</RadzenText>
                    <RadzenDatePicker Disabled="true"
                                      @bind-Value="Request.CreatedDate"
                                      Style="width:100%;" Min="@(DateTime.Today)"
                                      DateFormat="dd/MM/yyyy" />
                </div>
                <div class="col-md-4">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Completed Date</RadzenText>
                    <RadzenDatePicker Disabled="true"
                                      @bind-Value="Request.CompletedDate"
                                      Style="width:100%;" Min="@(DateTime.Today)"
                                      DateFormat="dd/MM/yyyy" MouseEnter="@(args => ShowCompletedDateTooltip(args))" />
                </div>
            </div>
        </div>
    </RadzenContent>
</EditForm>

@code {
    [Parameter]
    public TestRequestViewModel Request { get; set; }

    [Parameter]
    public EventCallback OnFormSubmitted { get; set; }

    [Parameter]
    public bool IsManagerOrQA { get; set; }

    private IEnumerable<UserNameIdViewModel> UsersThatAreQA;

    private EditForm _editForm;

    protected override async Task OnParametersSetAsync()
    {
        UsersThatAreQA = await UserService.GetUsersByRoleAsync(Request.ProjectId, AuthorizationRoles.QA);
        CreatedByUserName = await GetCreatedByUserName(Request.CreatedByUserId);
    }

    private async Task<string> GetCreatedByUserName(string id)
    {
        if (id is null || String.IsNullOrEmpty(id))
        {
            return String.Empty;
        }

        var user = await UserService.GetUserByIdAsync(id);
        return user.UserName;
    }

    private string? CreatedByUserName;

    private List<EnumItem<PriorityLevel>> GetPriorityLevelValues()
    {
        return Enum.GetValues(typeof(PriorityLevel))
            .Cast<PriorityLevel>()
            .Select(e => new EnumItem<PriorityLevel> { Value = e, Name = e.ToString() })
            .ToList();
    }

    private List<EnumItem<RequestStatus>> GetRequestStatusValues()
    {
        return Enum.GetValues(typeof(RequestStatus))
            .Cast<RequestStatus>()
            .Where(status => status != RequestStatus.None)
            .Select(e => new EnumItem<RequestStatus> { Value = e, Name = e.ToString() })
            .ToList();
    }

    public async Task<bool> SubmitForm()
    {
        var isValid = _editForm.EditContext.Validate();
        if (isValid)
        {
            await HandleValidSubmit();
        }
        return isValid;
    }

    private async Task HandleValidSubmit()
    {
        await TestRequestService.UpdateTestRequestAsync(Request);
        await OnFormSubmitted.InvokeAsync();
    }

    public string StatusAsString
    {
        get => Request.Status.ToString().Replace("_", " ");
        set => Request.Status = Enum.Parse<RequestStatus>(value.Replace(" ", ""));
    }

    private void ShowCompletedDateTooltip(ElementReference elementReference, TooltipOptions options = null)
                    => TooltipService.Open(elementReference, "This date will be set when the request is marked as completed.", options);

    private void ShowScheduledDateTooltip(ElementReference elementReference, TooltipOptions options = null)
                    => TooltipService.Open(elementReference, "You can only set this date when the request is ready for testing. ", options);
}

<style>
    .view-model-validation-msg {
        font-size: 11px !important;
        margin-top: 0.3rem;
        color: red;
    }
</style>