@inject TooltipService TooltipService
@inject DialogService DialogService
@inject TestRequestService TestRequestService

<RadzenContent>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-8">
                <RadzenLabel Text="Title" Style="@LabelStyle" />
                <RadzenTextBox @bind-Value="Request.Title" Style="width:100%;" />
            </div>
            <div class="col-md-4">
                <RadzenLabel Text="Assigned to" Style="@LabelStyle" />
                <RadzenDropDown Data="names"
                                @bind-Value="Request.AssignedTo.Name"
                                Style="width:100%;" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-12">
                <RadzenLabel Text="Description" Style="@LabelStyle" />
                <RadzenTextArea @bind-Value="Request.Description" Style="width:100%; height:170px; resize: none;" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-12">
                <RadzenLabel Text="Story Link" Style="@LabelStyle" />
                <RadzenTextBox @bind-Value="Request.StoryLink" Style="width:100%;" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-4">
                <RadzenLabel Text="Status" Style="@LabelStyle"  />
                <RadzenDropDown Data="@EnumHelper.GetSpacedNames(typeof(RequestStatus))"
                                @bind-Value="StatusAsString"
                                Style="width:100%;" />
            </div>
            <div class="col-md-4">
                <RadzenLabel Text="Priority Level" Style="@LabelStyle" />
                <RadzenDropDown Data="@EnumHelper.GetSpacedNames(typeof(PriorityLevel))"
                                @bind-Value="PriorityAsString" Style="width:100%;" />
            </div>
            <div class="col-md-4">
                <RadzenLabel Text="Created by" Style="@LabelStyle"  />
                <RadzenTextBox Disabled="true" @bind-Value="Request.CreatorId" Style="width:100%;" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-4">
                <RadzenLabel Text="Due Date" Style="@LabelStyle"  />
                <RadzenDatePicker @bind-Value="Request.DueDate"
                                  Style="width:100%;" Min="@(DateTime.Today)"
                                  DateFormat="dd/MM/yyyy" />
            </div>
            <div class="col-md-4">
                <RadzenLabel Text="Created Date" Style="@LabelStyle" />
                <RadzenDatePicker Disabled="true"
                                  @bind-Value="Request.CreatedDate"
                                  Style="width:100%;" Min="@(DateTime.Today)"
                                  DateFormat="dd/MM/yyyy" />
            </div>
            <div class="col-md-4">
                <RadzenLabel Text="Completed Date" Style="@LabelStyle" />
                <RadzenDatePicker Disabled="true"
                                  @bind-Value="Request.CompletedDate"
                                  Style="width:100%;" Min="@(DateTime.Today)"
                                  DateFormat="dd/MM/yyyy" MouseEnter="@(args => ShowCompletedDateTooltip(args) )" />
            </div>
        </div>
    </div>
</RadzenContent>

@code {
    [Parameter]
    public TestRequest Request { get; set; }

    private string LabelStyle = "font-weight: 600 !important; color: #333 !important;";

    // Temporary
    private List<string> names = new()
    {
        "Lucas",
        "Fernando"
    };

    public string PriorityAsString
    {
        get => Request.PriorityLevel.ToString().Replace("_", " ");
        set => Request.PriorityLevel = Enum.Parse<PriorityLevel>(value.Replace(" ", "_"));
    }

    public string StatusAsString
    {
        get => EnumHelper.AddSpacesToEnumName(Request.Status.ToString());
        set
        {
            var newStatus = Enum.Parse<RequestStatus>(value.Replace(" ", ""), true);
            if (Request.Status != newStatus)
            {
                var history = new TestRequestHistory
                    {
                        TestRequestId = Request.Id,
                        ChangedByUserId = "CurrentUserId", // Temporary
                        OldStatus = Request.Status,
                        NewStatus = newStatus,
                        ChangedDate = DateTime.Now
                    };

                Request.History.Add(history);

                Request.Status = newStatus;

                if (Request.Status == RequestStatus.Completed)
                {
                    Request.CompletedDate = DateTime.Now;
                }
            }
        }
    }

    private void ShowCompletedDateTooltip(ElementReference elementReference, TooltipOptions options = null)
                    => TooltipService.Open(elementReference, "This date will be set when the request is marked as completed.", options);

    private void ShowScheduledDateTooltip(ElementReference elementReference, TooltipOptions options = null)
                    => TooltipService.Open(elementReference, "You can only set this date when the request is ready for testing. ", options);
}
