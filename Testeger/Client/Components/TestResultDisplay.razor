@using Testeger.Client.ViewModels.TestCaseResults
@inject DialogService DialogService
@inject IConfiguration Configuration

<div class="col-12 shadow-sm my-2 p-0">
    <ToggleComponent>
        <Header>
            <div class="row d-flex justify-content-between" style="width: 100%;">
                <div class="col-xl-8 col-6">
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3" class="ps-0 pt-2">Result n°@Result.Number</RadzenText>
                </div>
                <div class="col-xl-4 col-6 d-flex align-items-center">
                    @if (!Result.IsSuccess)
                    {
                        <RadzenIcon Icon="close" IconColor="@Colors.DangerDark" class="me-0 ms-lg-5"></RadzenIcon>
                        <small class="result-p ms-1" style="color: var(--rz-danger-darker);">Failed</small>
                    } else
                    {
                        <RadzenIcon Icon="check" IconColor="@Colors.Success" class="me-0 ms-lg-5"></RadzenIcon>
                        <small class="result-p ms-1" style="color: var(--rz-success);">Passed</small>
                    }
                </div>
            </div>
           
        </Header>
        <ChildContent>
            <div class="row my-2 ms-1 me-2 pb-0">
                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3" class="ps-2 pt-0 result-h">Description:</RadzenText>
                <p class="result-p ms-0 ps-2 mb-0">
                    @Result.ActualResult
                </p>
            </div>
            <div class="row my-2 ms-1 me-2">
                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3" class="ps-2 pt-0 result-h">Evidence:</RadzenText>
                <div class="d-flex mb-3">
                    @if (Result.Images is not null && Result.Images.Any())
                    {
                        @foreach (var image in Result.Images)
                        {
                            <img id="small-img" src="@BaseAddress/api/images/@image.FilePath"
                            alt="Test Case Image"
                            class="shadow-sm mx-1"
                            @onclick="(() => OpenDialog(image.FilePath, image.TestCaseResultId, image.Id))" />
                        }
                    }
                </div>
            </div>
        </ChildContent>
    </ToggleComponent>
</div>

@code {
    [Parameter]
    public TestCaseResultViewModel Result { get; set; }
    private string? BaseAddress;

    protected override void OnInitialized()
    {
        BaseAddress = Configuration["ApiSettings:ApiBaseAddress"];
    }

    private async Task OpenDialog(string imageUrl, string testCaseResultId, string imageId)
    {
        var options = new DialogOptions { Width = "900px", Height = "680px", Resizable = false, Draggable = true };
        await DialogService.OpenAsync<ImageDialog>(string.Empty,
            new Dictionary<string, object> {
                { "ImageUrl", imageUrl },
                { "TestCaseResultId", testCaseResultId },
                { "ImageId", imageId },},
            options);
    }
}

<style>
    .result-p {
        font-size: 0.8rem;
    }

    .result-h {
        font-size: 0.9rem;
    }

    #small-img {
        display: block;
        max-width: 80px;
        max-height: 50px;
        width: auto;
        height: auto;
    }

        #small-img:hover {
            cursor: pointer;
        }

    .z-dialog-titlebar {
        padding-top: 0px !important;
        padding-bottom: 0px !important;
        padding-right: 0px !important;
        padding-left: 0px !important;
    }
</style>
