@page "/test-request/{RequestId}"
@layout DefaultLayout
@inject DialogService DialogService
@inject ITestRequestServiceNV TestRequestService
@inject ITestCaseServiceNV TestCaseService
@inject NavigationManager NavigationManager
@inject TooltipService TooltipService

@if(Request is not null)
{
    <PageTitle>@RequestTitle - Testeger</PageTitle>

    <div class="container-fluid mb-5 mt-2">
        <div class="row justify-content-between">
            <div class="col-auto">
                <RadzenBreadCrumb>
                    <RadzenBreadCrumbItem Path="@Testeger.Client.Helpers.BreadCrumbHelper.GetProjectUrl(Request.ProjectId)" Text="Project" />
                    <RadzenBreadCrumbItem Text="@Testeger.Client.Helpers.BreadCrumbHelper.GetRequestText(Request.Number)" />
                </RadzenBreadCrumb>
            </div>
            <div class="col-auto d-flex">
                <RadzenButton Icon="save"
                              Text="Save"
                              ButtonStyle="ButtonStyle.Primary"
                              Size="ButtonSize.Small"
                              Click="Save"
                              MouseEnter="@(args => ShowSaveRequestButtonTooltip(args) )"
                              class="me-2" />
                <RadzenButton Icon="delete"
                              Text="Delete"
                              ButtonStyle="ButtonStyle.Danger"
                              Shade="Shade.Darker"
                              Size="ButtonSize.Small"
                              Click="HandleTestRequestDeletion"
                              MouseEnter="@(args => ShowDeleteRequestButtonTooltip(args) )" />
            </div>
        </div>
    </div>


    <div class="container">
        <div class="row d-flex justify-content-between">
            <div class="col-6 pb-2 right-divider">
                <TestRequestDetails Request="Request" @ref="TestRequestDetailsComponent" OnFormSubmitted="HandleTestRequestUpdate" /> 
            </div>

            <div class="col-6 pb-2">
                <RadzenContent>
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-12 d-flex justify-content-between">
                                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H3">Test Cases</RadzenText>
                                <RadzenButton Icon="add_circle" Text="Add case" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Click="OpenTestCaseCreationDialog" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12 p-0 mt-2" style="min-width: 400px;">
                                <TestCasesDataList TestCases="TestCases" />
                            </div>
                        </div>
                    </div>
                </RadzenContent>
            </div>
        </div>
    </div>
}

@code {
    private TestRequestViewModel? Request;
    private TestRequestDetails TestRequestDetailsComponent;
    private string? RequestTitle;

    [Parameter]
    public EventCallback OnRequestDeleted { get; set; }

    [Parameter]
    public EventCallback OnRequestUpdated { get; set; }

    [Parameter]
    public string? RequestId { get; set; }

    private IEnumerable<TestCaseViewModel> TestCases { get; set; } = new List<TestCaseViewModel>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Request = await TestRequestService.GetTestRequestByIdAsync(RequestId);

        TestRequestService.OnChange += StateHasChanged;
        TestCaseService.OnTestCaseAdded += UpdateTestCases;
        TestCaseService.OnTestCaseDeleted += UpdateTestCases;
        TestCaseService.OnTestCaseUpdated += UpdateTestCases;

        TestCases = await TestCaseService.GetTestCasesByTestRequestIdPagedAsync(Request.Id);
        RequestTitle = Request.Title;
    }

    private async void UpdateTestCases()
    {
        TestCases = await TestCaseService.GetTestCasesByTestRequestIdPagedAsync(Request.Id);
        StateHasChanged();
    }

    private async Task HandleTestRequestDeletion()
    {
        if (Request != null)
        {
            await TestRequestService.DeleteTestRequestAsync(Request.Id);
            NavigationManager.NavigateTo(Testeger.Client.Helpers.BreadCrumbHelper.GetProjectUrl(Request.ProjectId));
            await OnRequestDeleted.InvokeAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task Save()
    {
        if (TestRequestDetailsComponent != null)
        {
            bool isFormValid = await TestRequestDetailsComponent.SubmitForm();

            if (isFormValid)
            {
                await HandleTestRequestUpdate();
            }
        }
    }

    private async Task HandleTestRequestUpdate()
    {
        await OnRequestUpdated.InvokeAsync();
        await InvokeAsync(StateHasChanged); 
    }

    public async Task OpenTestCaseCreationDialog()
    {
        await DialogService.OpenAsync<TestCaseCreationDialog>("Create Test Case",
               new Dictionary<string, object>() { { "RequestId", RequestId }, { "ProjectId", Request.ProjectId } },
               new DialogOptions() { Width = "1024px", Height = "480px", Resizable = false, Draggable = true });
    }

    private void ShowSaveRequestButtonTooltip(ElementReference elementReference, TooltipOptions options = null)
                    => TooltipService.Open(elementReference, "Save the changes made in this request", options);

    private void ShowDeleteRequestButtonTooltip(ElementReference elementReference, TooltipOptions options = null)
                    => TooltipService.Open(elementReference, "Delete this entire request", options);
}


