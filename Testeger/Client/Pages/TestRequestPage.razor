@page "/test-request/{RequestId}"
@layout DefaultLayout
@inject DialogService DialogService
@inject TestRequestService TestRequestService
@inject TestCaseService TestCaseService
@inject NavigationManager NavigationManager
@inject TooltipService TooltipService

@if(Request is not null)
{
    <PageTitle>@Request.Title - Testeger</PageTitle>

    <div class="rz-m-12 p-0 m-0">
        <div class="row justify-content-between">
            <div class="col-auto">
                <RadzenBreadCrumb>
                    <RadzenBreadCrumbItem Path="@BreadCrumbHelper.GetProjectUrlBasedOnRequest(Request)" Text="Project" />
                    <RadzenBreadCrumbItem Text="@BreadCrumbHelper.GetRequestText(Request)" />
                </RadzenBreadCrumb>
            </div>
            <div class="col-auto d-flex">
                <RadzenButton Icon="save"
                              Text="Save"
                              ButtonStyle="ButtonStyle.Primary"
                              Size="ButtonSize.Small"
                              Click="HandleTestRequestUpdate"
                              MouseEnter="@(args => ShowSaveRequestButtonTooltip(args) )"
                              class="me-2" />
                <RadzenButton Icon="delete"
                              Text="Delete"
                              ButtonStyle="ButtonStyle.Danger"
                              Size="ButtonSize.Small"
                              Click="HandleTestRequestDeletion"
                              MouseEnter="@(args => ShowDeleteRequestButtonTooltip(args) )" />
            </div>
        </div>
    </div>


    <div class="container">
        <div class="row d-flex justify-content-between">
            <div class="col-6 pb-2 right-divider">
                <TestRequestDetails Request="Request"/>
            </div>

            <div class="col-6 pb-2">
                <RadzenContent>
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-12 d-flex justify-content-between">
                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5">Test Cases</RadzenText>
                                <RadzenButton Icon="add_circle" Text="Add case" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Click="OpenTestCaseCreationDialog" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12 p-0 mt-2" style="min-width: 400px;">
                                <TestCasesDataList TestCases="TestCases" />
                            </div>
                        </div>
                    </div>
                </RadzenContent>
            </div>
        </div>
    </div>
}

@code {
    private TestRequest? Request;

    [Parameter]
    public EventCallback OnRequestDeleted { get; set; }

    [Parameter]
    public EventCallback OnRequestUpdated { get; set; }

    [Parameter]
    public string? RequestId { get; set; }

    private List<TestCase> TestCases = new();

    private TestCase TestCase { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Request = await TestRequestService.GetTestRequestById(RequestId);

        TestRequestService.OnChange += StateHasChanged;
        TestCaseService.OnTestCaseAdded += UpdateTestCases;
        TestCaseService.OnTestCaseDeleted += UpdateTestCases;
        TestCaseService.OnTestCaseUpdated += UpdateTestCases;

        TestCases = await TestCaseService.GetTestCasesByRequestId(Request.Id);
    }

    private async void UpdateTestCases()
    {
        TestCases = await TestCaseService.GetTestCasesByRequestId(Request.Id);
        StateHasChanged();
    }

    private async Task HandleTestRequestDeletion()
    {
        if (Request != null)
        {
            await TestRequestService.RemoveTestRequest(Request);
            NavigationManager.NavigateTo(BreadCrumbHelper.GetProjectUrlBasedOnRequest(Request));
            await OnRequestDeleted.InvokeAsync();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleTestRequestUpdate()
    {
        if (Request != null)
        {
            await TestRequestService.UpdateTestRequest(Request);
            await OnRequestUpdated.InvokeAsync();
            await InvokeAsync(StateHasChanged); 
        }
    }

    public async Task OpenTestCaseCreationDialog()
    {
        await DialogService.OpenAsync<TestCaseCreationDialog>("Create Test Case",
               new Dictionary<string, object>() { { "RequestId", RequestId }, { "ProjectId", Request.ProjectId } },
               new DialogOptions() { Width = "1024px", Height = "480px", Resizable = false, Draggable = true });
    }

    private void ShowSaveRequestButtonTooltip(ElementReference elementReference, TooltipOptions options = null)
                    => TooltipService.Open(elementReference, "Save the changes made in this request", options);

    private void ShowDeleteRequestButtonTooltip(ElementReference elementReference, TooltipOptions options = null)
                    => TooltipService.Open(elementReference, "Delete this entire request", options);
}

<style>
    .right-divider {
        border-right: 1px solid #ced4da;
    }
</style>


