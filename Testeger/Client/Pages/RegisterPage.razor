@page "/register"
@using System.Text.RegularExpressions
@using Testeger.Client.Authentication
@inject NavigationManager NavigationManager
@inject ICustomAuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Register - Testeger</PageTitle>

<div class="row d-flex justify-content-center align-items-center vh-100">
    <div class="col-12 col-md-8 col-lg-6 col-xl-6">
        <div class="card shadow-sm" style="border-radius: 15px;">
            <div class="card-body p-5">
                <div class="row d-flex justify-content-between">
                    <h3 class="mb-5">Create an account</h3>

                </div>

                <EditForm Model="registerModel" OnValidSubmit="HandleRegistration">
                    <DataAnnotationsValidator />
                    <div class="register-container">
                        <div class="row mb-2 d-flex justify-content-between">
                            <div class="col-8">
                                <div class="form-group">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Username</RadzenText>
                                    <InputText id="userName" class="form-control" placeholder="Username" @bind-Value="registerModel.Username" />
                                    <ValidationMessage For="@(() => registerModel.Username)" class="view-model-validation-msg" />
                                </div>
                            </div>
                            @* <div class="col-6">
                            <div class="form-group">
                            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Last Name</RadzenText>
                            <InputText id="lastName" class="form-control" placeholder="Last" @bind-Value="registerModel.LastName" />
                            </div>
                            </div> *@
                        </div>

                        <div class="row mb-2 d-flex justify-content-between">
                            <div class="col-6">
                                <div class="form-group">
                                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Birth date</RadzenText>
                                <RadzenDatePicker @bind-Value="registerModel.BirthDate"
                                Style="width:100%;" Max="@(DateTime.Today)"
                                DateFormat="dd/MM/yyyy"
                                Placeholder="01/01/0001" />
                                <ValidationMessage For="@(() => registerModel.BirthDate)" class="view-model-validation-msg" />
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="form-group">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Phone number</RadzenText>
                                    <RadzenMask Mask="(**) *****-****" CharacterPattern="[0-9]" Placeholder="(00) 00000-0000" Name="Phone" @bind-Value=@registerModel.PhoneNumber
                                                Style="width: 100%;" aria-label="Phone" />
                                    <ValidationMessage For="@(() => registerModel.PhoneNumber)" class="view-model-validation-msg" />
                                </div>
                            </div>
                        </div>

                        <div class="row mb-2 d-flex justify-content-between">
                            <div class="col-12">
                                <div class="form-group">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">E-mail</RadzenText>
                                    <InputText id="email" class="form-control" placeholder="testeger@email.com" @bind-Value="registerModel.Email" />
                                    <ValidationMessage For="@(() => registerModel.Email)" class="view-model-validation-msg" />
                                </div>
                            </div>

                        </div>

                        <div class="row mb-2 d-flex justify-content-between">
                            <div class="col-6">
                                <div class="form-group">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Password</RadzenText>
                                    <RadzenPassword @bind-Value=@registerModel.Password aria-label="enter password" Style="width: 100%;" />
                                    <ValidationMessage For="@(() => registerModel.Password)" class="view-model-validation-msg" />
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="form-group">
                                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Confirm Password</RadzenText>
                                    <RadzenPassword @bind-Value=@registerModel.ConfirmPassword aria-label="confirm password" Style="width: 100%;" />
                                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="view-model-validation-msg" />
                                </div>
                            </div>
                        </div>

                        <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" Text="Register" Style="width: 100%;" Disabled="@isRegistrationBeingProcessed"/>

                        <p class="mt-4 mb-1">
                            <small>
                                Already have an account? <RadzenLink Path="login" Text="Login here" class="login-link" />
                            </small>
                        </p>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>
</div>

@code {
    private RegisterViewModel registerModel = new RegisterViewModel();
    private int value = 1;
    private bool isRegistrationBeingProcessed;

    private async Task HandleRegistration()
    {
        isRegistrationBeingProcessed = true;
        registerModel.PhoneNumber = ConvertToNumbersOnly(registerModel.PhoneNumber);

        var result = await AuthService.RegisterAsync(registerModel);

        isRegistrationBeingProcessed = false;

        if (result.Success)
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();
            NavigationManager.NavigateTo("/login");
        }
    }

    public static string ConvertToNumbersOnly(string input)
    {
        return Regex.Replace(input, @"\D", "");
    }
}

<style>
    .register-container {
        max-width: 600px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control::placeholder {
        font-size: 15px;
    }

    .form-control {
        font-size: 15px;
    }

    .login-link {
        color: var(--rz-primary);
    }

    .view-model-validation-msg {
        font-size: 11px !important;
        margin-top: 0.3rem;
        color: red;
    }
</style>