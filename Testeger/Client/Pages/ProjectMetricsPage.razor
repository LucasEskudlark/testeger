@page "/project/{ProjectId}/metrics"
@layout DefaultLayout
@inject TestRequestService TestRequestService
@inject TestCaseService TestCaseService

<div class="container-fluid">
    <div class="row">
        <div class="col-auto">
            <RadzenBreadCrumb>
                <RadzenBreadCrumbItem Path="@BreadCrumbHelper.GetProjectUrl(ProjectId)" Text="Project" />
                <RadzenBreadCrumbItem Text="Metrics" />
            </RadzenBreadCrumb>
        </div>
    </div>
    @if (TestCases is null && TestRequests is null)
    {
        <div class="row mt-4 d-flex justify-content-center">
            <div class="col-4">
                <RadzenCard>
                    <h5>There are no metrics for this project yet.</h5>
                </RadzenCard>
            </div>
        </div>
    } else
    {
        <div class="row mt-4">
            <div class="col-4">
                <RadzenCard>
                    <RadzenChart>
                        <RadzenColumnSeries Data="@revenue2024" CategoryProperty="Quarter" Title="2024" LineType="LineType.Dashed" ValueProperty="Revenue">
                            <RadzenSeriesDataLabels Visible="false" />
                        </RadzenColumnSeries>
                        <RadzenColumnOptions Radius="5" />
                        <RadzenValueAxis Formatter="@FormatAsUSD">
                            <RadzenGridLines Visible="true" />
                            <RadzenAxisTitle Text="Revenue in USD" />
                        </RadzenValueAxis>
                    </RadzenChart>
                </RadzenCard>
            </div>
            <div class="col-4">
                <RadzenCard>
                    <h3>Oi</h3>
                </RadzenCard>
            </div>
            <div class="col-4">
                <RadzenCard>
                    <h3>Oi</h3>
                </RadzenCard>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string ProjectId { get; set; }

    private List<TestRequest> TestRequests { get; set; }
    private List<TestCase> TestCases { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TestRequests = await TestRequestService.GetTestRequestsByProjectId(ProjectId);
        TestCases = await TestCaseService.GetTestCasesByProjectId(ProjectId);
    }

    class DataItem
    {
        public string Quarter { get; set; }
        public double Revenue { get; set; }
    }

    DataItem[] revenue2024 = new DataItem[] {
        new DataItem
        {
            Quarter = "Q1",
            Revenue = 254000
        },
        new DataItem
        {
            Quarter = "Q2",
            Revenue = 324000
        },
        new DataItem
        {
            Quarter = "Q3",
            Revenue = 354000
        },
        new DataItem
        {
            Quarter = "Q4",
            Revenue = 394000
        },

    };
}
