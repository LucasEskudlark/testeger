@page "/test-case/{TestCaseId}"
@layout DefaultLayout
@inject NavigationManager NavigationManager
@inject TooltipService TooltipService
@inject DialogService DialogService
@inject ITestCaseServiceNV TestCaseService
@inject ITestRequestServiceNV TestRequestService
@inject ITestCaseResultService TestCaseResultService


@if (isInitialized)
{
    <PageTitle>@TestCaseTitle - Testeger</PageTitle>

    <div class="container-fluid mb-5 mt-2">
        <div class="row justify-content-between">
            <div class="col-auto">
                <RadzenBreadCrumb>
                    <RadzenBreadCrumbItem Path="@Testeger.Client.Helpers.BreadCrumbHelper.GetProjectUrl(Request.ProjectId)" Text="Project" />
                    <RadzenBreadCrumbItem Path="@Testeger.Client.Helpers.BreadCrumbHelper.GetRequestUrl(Request.Id)" Text="@Testeger.Client.Helpers.BreadCrumbHelper.GetRequestText(Request.Number)" />
                    <RadzenBreadCrumbItem Text="@TestCase.Title" />
                </RadzenBreadCrumb>
            </div>
            <div class="col-auto d-flex">
                <RadzenButton Icon="play_arrow"
                              Text="@TestButtonText"
                              ButtonStyle="@TestButtonStyle"
                              Size="ButtonSize.Small"
                              Click="@HandleTestButtonClick"
                              Disabled="@isNotScheduled"
                              class="me-2" />

                <RadzenButton Icon="save"
                              Text="Save"
                              ButtonStyle="ButtonStyle.Primary"
                              Size="ButtonSize.Small"
                              Click="@Save"
                              MouseEnter="@(args => ShowTooltip(args, "Save the changes made in this request"))"
                              class="me-2" />

                <RadzenButton Icon="delete"
                              Text="Delete"
                              ButtonStyle="ButtonStyle.Danger"
                              Shade="Shade.Darker"
                              Size="ButtonSize.Small"
                              Click="@HandleTestCaseDeletion"
                              MouseEnter="@(args => ShowTooltip(args, "Delete this entire request"))" />
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row d-flex justify-content-between">
            <div class="col-6 pb-2 right-divider">
                <TestCaseDetailsPage Request="Request" TestCase="TestCase" @ref="TestCaseDetailsComponent" OnFormSubmitted="HandleTestCaseUpdate" />
            </div>

            <div class="col-6 pb-2">
                <TestCaseTestingDetails TestCase="TestCase" />
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string TestCaseId { get; set; }
    [Parameter]
    public EventCallback OnTestCaseDeleted { get; set; }
    [Parameter]
    public EventCallback OnTestCaseUpdated { get; set; }

    private TestCaseViewModel TestCase { get; set; }
    private TestRequestViewModel Request { get; set; }
    private TestCaseResultViewModel LatestTestCaseResult { get; set; }
    private TestCaseDetailsPage TestCaseDetailsComponent;
    private string? TestCaseTitle;

    private bool isInitialized;
    private bool isNotScheduled;
    private bool isTestRunning = false;

    private string TestButtonText => isTestRunning ? "Continue Test" : "Start Test";
    private ButtonStyle TestButtonStyle => isTestRunning ? ButtonStyle.Warning : ButtonStyle.Success;


    protected override async Task OnInitializedAsync()
    {
        await GetTestCase();
        await GetLatestTestCaseResult();
        Request = await TestRequestService.GetTestRequestByIdAsync(TestCase.TestRequestId);
        TestCaseService.OnChange += StateHasChanged;
        isNotScheduled = TestCase.ScheduledDate == default;

        if (LatestTestCaseResult.Id is not null)
        {
            isTestRunning = true;
        }

        TestCaseTitle = TestCase.Title;
        isInitialized = true;
    }

    private async Task GetTestCase()
    {
        TestCase = await TestCaseService.GetTestCaseByIdAsync(TestCaseId);
        StateHasChanged();
    }

    private async Task GetLatestTestCaseResult()
    {
        LatestTestCaseResult = await TestCaseResultService.GetLastResultOrDefaultForTestCaseAsync(TestCase.Id);
        StateHasChanged();
    }

    private async Task HandleTestCaseDeletion()
    {
        if (TestCase != null)
        {
            await TestCaseService.DeleteTestCaseByIdAsync(TestCase.Id);
            NavigationManager.NavigateTo(Testeger.Client.Helpers.BreadCrumbHelper.GetRequestUrl(Request.Id));
            await OnTestCaseDeleted.InvokeAsync();
        }
    }

    private async Task Save()
    {
        if (TestCaseDetailsComponent != null)
        {
            bool isFormValid = await TestCaseDetailsComponent.SubmitForm();

            if (isFormValid)
            {
                await HandleTestCaseUpdate();
            }
        }
    }

    private async Task HandleTestCaseUpdate()
    {
        if (TestCase != null)
        {
            await OnTestCaseUpdated.InvokeAsync();
            isNotScheduled = TestCase.ScheduledDate == default;
        }
    }

    private async Task HandleTestButtonClick()
    {
        isTestRunning = true;
        await OpenTestCaseTestingDialog();
    }

    public async Task OpenTestCaseTestingDialog()
    {
        var options = new DialogOptions { Width = "900px", Height = "630px", Resizable = false, Draggable = true };
        await DialogService.OpenAsync<TestCaseTestingDialog>("Testing",
            new Dictionary<string, object> { 
                { "TestCase", TestCase },
                { "LatestTestCaseResult", LatestTestCaseResult },
                { nameof(TestCaseTestingDialog.OnTestFinished), HandleTestFinished },
                { nameof(TestCaseTestingDialog.OnTestSaved), HandleTestSaved }},
            options);
    }

    private void ShowTooltip(ElementReference elementReference, string message, TooltipOptions options = null)
    {
        TooltipService.Open(elementReference, message, options);
    }

    private EventCallback HandleTestFinished => new(this, async () =>
    {
        await GetTestCase();
        await GetLatestTestCaseResult();
        isTestRunning = false;
        await InvokeAsync(StateHasChanged);
        StateHasChanged();
    });

    private EventCallback HandleTestSaved => new(this, async () =>
    {
        await GetTestCase();
        await GetLatestTestCaseResult();
        await InvokeAsync(StateHasChanged);
    });
}
