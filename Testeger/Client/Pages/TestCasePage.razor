@page "/test-case/{TestCaseId}"
@layout DefaultLayout
@inject TestCaseService TestCaseService
@inject TestRequestService TestRequestService
@inject NavigationManager NavigationManager
@inject TooltipService TooltipService
@inject DialogService DialogService

@if (TestCase is not null)
{
    <PageTitle>@TestCase.Title - Testeger</PageTitle>

    <div class="container-fluid mb-5 mt-2">
        <div class="row justify-content-between">
            <div class="col-auto">
                <RadzenBreadCrumb>
                    <RadzenBreadCrumbItem Path="@BreadCrumbHelper.GetProjectUrlBasedOnRequest(Request)" Text="Project" />
                    <RadzenBreadCrumbItem Path="@BreadCrumbHelper.GetRequestUrl(Request)" Text="@BreadCrumbHelper.GetRequestText(Request)" />
                    <RadzenBreadCrumbItem Text="@TestCase.Title" />
                </RadzenBreadCrumb>
            </div>
            <div class="col-auto d-flex">
                <RadzenButton Icon="play_arrow"
                              Text="Start test"
                              ButtonStyle="ButtonStyle.Success"
                              Size="ButtonSize.Small"
                              Click="@OpenTestCaseTestingDialog"
                              class="me-2" />

                <RadzenButton Icon="save"
                              Text="Save"
                              ButtonStyle="ButtonStyle.Primary"
                              Size="ButtonSize.Small"
                              Click="@HandleTestCaseUpdate"
                              MouseEnter="@(args => ShowTooltip(args, "Save the changes made in this request"))"
                              class="me-2" />

                <RadzenButton Icon="delete"
                              Text="Delete"
                              ButtonStyle="ButtonStyle.Danger"
                              Shade="Shade.Darker"
                              Size="ButtonSize.Small"
                              Click="@HandleTestCaseDeletion"
                              MouseEnter="@(args => ShowTooltip(args, "Delete this entire request"))" />
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row d-flex justify-content-between">
            <div class="col-6 pb-2 right-divider">
                <TestCaseDetailsPage Request="Request" TestCase="TestCase" />
            </div>

            <div class="col-6 pb-2">
                <TestCaseTestingDetails TestCase="TestCase" />
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string TestCaseId { get; set; }

    [Parameter]
    public EventCallback OnTestCaseDeleted { get; set; }

    [Parameter]
    public EventCallback OnTestCaseUpdated { get; set; }

    public TestRequest Request { get; set; }
    private TestCase TestCase { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TestCase = await TestCaseService.GetTestCaseById(TestCaseId);
        Request = await TestRequestService.GetTestRequestById(TestCase.RequestId);
        TestCaseService.OnChange += StateHasChanged;
    }

    private async Task HandleTestCaseDeletion()
    {
        if (TestCase != null)
        {
            await TestCaseService.RemoveTestCase(TestCase);
            NavigationManager.NavigateTo(BreadCrumbHelper.GetRequestUrl(Request));
            await OnTestCaseDeleted.InvokeAsync();
        }
    }

    private async Task HandleTestCaseUpdate()
    {
        if (TestCase != null)
        {
            await TestCaseService.UpdateTestCase(TestCase);
            await OnTestCaseUpdated.InvokeAsync();
        }
    }

    private async Task OpenTestCaseTestingDialog()
    {
        var options = new DialogOptions { Width = "700px", Height = "630px", Resizable = false, Draggable = true };
        await DialogService.OpenAsync<TestCaseTestingDialog>("Testing",
            new Dictionary<string, object> { { "TestCaseId", TestCaseId }, { nameof(TestCaseTestingDialog.OnTestFinished), UpdateTestCase } },
            options);
    }

    private void ShowTooltip(ElementReference elementReference, string message, TooltipOptions options = null)
    {
        TooltipService.Open(elementReference, message, options);
    }

    private EventCallback UpdateTestCase => new(this, async () =>
    {
        TestCase = await TestCaseService.GetTestCaseById(TestCaseId);
        await InvokeAsync(StateHasChanged);
    });
}
