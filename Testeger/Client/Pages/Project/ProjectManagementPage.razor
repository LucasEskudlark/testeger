@page "/project/{ProjectId}/manage"
@layout DefaultLayout
@inject ProjectService ProjectService
@inject TooltipService TooltipService

@if (Project is not null)
{
    <div class="row mb-4" style="min-width: 900px; width: 100%;">
        <div class="col-6">
            <RadzenBreadCrumb>
                <RadzenBreadCrumbItem Path="@BreadCrumbHelper.GetProjectUrl(ProjectId)" Text="Project" />
                <RadzenBreadCrumbItem Text="Manage" />
            </RadzenBreadCrumb>
        </div>
        <div class="col-6 d-flex justify-content-end" style="min-width: 450px;">
            <RadzenButton Shade="Shade.Darker" Icon="delete" Text="Delete" ButtonStyle="ButtonStyle.Danger" />
        </div>
    </div>

    <div class="row mt-4 mb-5" style="min-width: 900px;">
        <div class="col-6">
            <h5><strong>Project: @Project?.Name</strong></h5>
        </div>
    </div>

    <div class="container ms-0 ps-0">
        <div class="row mb-4 d-flex justify-content-start">
            <div class="col-2 d-flex flex-column">
                <RadzenLabel Text="Created Date" Style="@LabelStyle" />
                <RadzenDatePicker Disabled="true"
                                  @bind-Value="Project.CreatedDate"
                                  Style="width: 100%;" Min="@(DateTime.Today)"
                                  DateFormat="dd/MM/yyyy" />
            </div>
            <div class="col-2 d-flex flex-column">
                <RadzenLabel Text="Created by" Style="@LabelStyle" />
                <RadzenTextBox Disabled="true" @bind-Value="Project.CreatorId" Style="width: 100%;" />
            </div>
        </div>
        <div class="row">
            <div class="col-8">
                <div class="row mb-2">
                    <div class="col-4">
                        <RadzenLabel Text="Project Members" Style="@LabelStyle" />
                    </div>
                    <div class="col-8 d-flex justify-content-end">
                        <RadzenButton Shade="Shade.Darker"
                                      Icon="remove"
                                      Text="Remove"
                                      Click="RemoveUser"
                                      Size="ButtonSize.Small"
                                      ButtonStyle="ButtonStyle.Danger"
                                      MouseEnter="@(args => ShowRemoveMemberTooltip(args))"
                                      class="me-2" />
                        <RadzenButton Icon="add"
                                      Text="Add"
                                      Size="ButtonSize.Small"
                                      ButtonStyle="ButtonStyle.Primary"
                                      MouseEnter="@(args => ShowAddMemberTooltip(args))" />
                    </div>
                </div>
                <ProjectMembersDataGrid Members="@Project.Members" SelectedUsersChanged="HandleSelectionChange" />
            </div>
        </div>
    </div>
}

@code {
    private const string LabelStyle = "font-weight: 600 !important; color: #333 !important;";

    [Parameter]
    public string ProjectId { get; set; }

    private Project Project { get; set; }

    private IList<User> SelectedUsers { get; set; }

    private void HandleSelectionChange(IList<User> selectedUsers)
    {
        SelectedUsers = selectedUsers;
    }

    protected override async Task OnInitializedAsync()
    {
        Project = await ProjectService.GetProjectById(ProjectId);

        ProjectService.OnProjectUpdated += StateHasChanged;
    }

    // private async Task RemoveUser()
    // {
    //     if (SelectedUsers == null || !SelectedUsers.Any())
    //     {
    //         Console.WriteLine("Empty");
    //         return;
    //     }

    //     await ProjectService.RemoveProjectMember(ProjectId, SelectedUsers);
    // }

    // private static bool ContainsUserWithEmail(List<User> users, string email)
    // {
    //     return users.Any(user => user.Email.Equals(email, StringComparison.OrdinalIgnoreCase));
    // }

    private void ShowRemoveMemberTooltip(ElementReference elementReference, TooltipOptions options = null)
        => TooltipService.Open(elementReference, "Remove selected members from the project.", options);

    private void ShowAddMemberTooltip(ElementReference elementReference, TooltipOptions options = null)
        => TooltipService.Open(elementReference, "Add member to the project.", options);
}