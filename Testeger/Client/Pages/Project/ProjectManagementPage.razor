@page "/project/{ProjectId}/manage"
@layout DefaultLayout
@inject IProjectServiceNV ProjectService
@inject TooltipService TooltipService
@inject IUserService UserService
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy = $"{AuthorizationRoles.Manager}")]


@if (Project is not null)
{
    <PageTitle>@Project.Name Settings - Testeger</PageTitle>

    <div class="row mb-4" style="min-width: 900px; width: 100%;">
        <div class="col-6">
            <RadzenBreadCrumb>
                <RadzenBreadCrumbItem Path="@BreadCrumbHelper.GetProjectUrl(ProjectId)" Text="Project" />
                <RadzenBreadCrumbItem Text="Manage" />
            </RadzenBreadCrumb>
        </div>
        <div class="col-6 d-flex justify-content-end" style="min-width: 450px;">
            <RadzenButton Shade="Shade.Darker" Icon="delete" Text="Delete" ButtonStyle="ButtonStyle.Danger" Click="@ShowConfirmDialog" />
        </div>
    </div>

    <div class="row mt-4 mb-5" style="min-width: 900px;">
        <div class="col-6">
            <h5><strong>Project: @Project?.Name</strong></h5>
        </div>
    </div>

    <div class="container ms-0 ps-0">
        <div class="row mb-4 d-flex justify-content-start">
            <div class="col-2 d-flex flex-column">
                <RadzenLabel Text="Created Date" Style="@LabelStyle" />
                <RadzenDatePicker Disabled="true"
                                  @bind-Value="Project.CreatedDate"
                                  Style="width: 100%;" Min="@(DateTime.Today)"
                                  DateFormat="dd/MM/yyyy" />
            </div>
            <div class="col-2 d-flex flex-column">
                <RadzenLabel Text="Created by" Style="@LabelStyle" />
                <RadzenTextBox Disabled="true" @bind-Value="CreatedByUserName" Style="width: 100%;" />
            </div>
        </div>
        <div class="row">
            <div class="col-8">
                <div class="row mb-2">
                    <div class="col-4">
                        <RadzenLabel Text="Project Members" Style="@LabelStyle" />
                    </div>
                    <div class="col-8 d-flex justify-content-end">
                       @*  <RadzenButton Shade="Shade.Darker"
                                      Icon="remove"
                                      Text="Remove"
                                      Size="ButtonSize.Small"
                                      ButtonStyle="ButtonStyle.Danger"
                                      MouseEnter="@(args => ShowRemoveMemberTooltip(args))"
                                      class="me-2" /> *@
                        <RadzenButton Icon="add"
                                      Text="Invite"
                                      Size="ButtonSize.Small"
                                      ButtonStyle="ButtonStyle.Primary"
                                      Click="OpenUserInvitationDialog"
                                      MouseEnter="@(args => ShowAddMemberTooltip(args))" />
                    </div>
                </div>
                <ProjectMembersDataGrid Users="@ProjectUsers" SelectedUsersChanged="HandleSelectionChange" />
            </div>
        </div>
    </div>
}

@code {
    private const string LabelStyle = "font-weight: 600 !important; color: #333 !important;";

    [Parameter]
    public string ProjectId { get; set; }

    private ProjectViewModel Project { get; set; }
    private string CreatedByUserName;

    private IEnumerable<UserViewModel> ProjectUsers { get; set; }

    private IList<UserViewModel> SelectedUsers { get; set; }

    private void HandleSelectionChange(IList<UserViewModel> selectedUsers)
    {
        SelectedUsers = selectedUsers;
    }

    protected override async Task OnInitializedAsync()
    {
        Project = await ProjectService.GetProjectByIdAsync(ProjectId);
        CreatedByUserName = await GetCreatedByUserName(Project.CreatedByUserId);
        ProjectUsers = await UserService.GetUsersByProjectIdAsync(ProjectId);

        ProjectService.OnProjectUpdated += StateHasChanged;
    }

    private async Task<string> GetCreatedByUserName(string id)
    {
        if (id is null || String.IsNullOrEmpty(id))
        {
            return String.Empty;
        }

        var user = await UserService.GetUserByIdAsync(id);
        return user.UserName;
    }

    public async Task OpenUserInvitationDialog()
    {
        await DialogService.OpenAsync<InviteUserDialog>(
            "Invite user",
            new Dictionary<string, object>() { { "ProjectId", ProjectId } },
            new DialogOptions() { Width = "650px", Height = "540px", Resizable = false, Draggable = true }
        );
    }

    private async Task ShowConfirmDialog()
    {
        var result = await DialogService.Confirm("Are you sure?", $"Delete project {Project.Name}", new ConfirmOptions()
            {
                OkButtonText = "Yes",
                CancelButtonText = "No"
            });

        if (result.HasValue && result.Value)
        {
            await DeleteProject();
        }
    }

    public async Task DeleteProject()
    {
        await ProjectService.DeleteProjectAsync(ProjectId);
        NavigationManager.NavigateTo($"/home");
    }

    // private void ShowRemoveMemberTooltip(ElementReference elementReference, TooltipOptions options = null)
    //     => TooltipService.Open(elementReference, "Remove selected members from the project.", options);

    private void ShowAddMemberTooltip(ElementReference elementReference, TooltipOptions options = null)
        => TooltipService.Open(elementReference, "Add member to the project.", options);
}