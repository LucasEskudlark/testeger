@page "/project/{Id}"
@layout DefaultLayout
@inject IProjectServiceNV ProjectService
@inject ITestRequestServiceNV TestRequestService
@inject NavigationManager NavigationManager
@inject IPolicyValidatorService PolicyValidatorService
@attribute [Authorize(Policy = $"{AuthorizationRoles.Manager}, {AuthorizationRoles.QA}, {AuthorizationRoles.Developer}")]

<PageTitle>@project?.Name - Testeger</PageTitle>

<div class="row mb-3" style="min-width: 900px;">
    <div class="col-6">
        <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H6">Project: @project?.Name</RadzenText>
    </div>
    <div class="col-6 d-flex justify-content-end" style="min-width: 450px;">
         <RadzenButton
             Click="NavigateToProjectManagementPage"
             Icon="settings"
             ButtonStyle="ButtonStyle.Light"
             class="me-2"
             Disabled="@(!isManager)"/>
        <RadzenButton
            Click="NavigateToProjectMetricsPage"
            Icon="analytics"
            Text="Project Metrics"
            ButtonStyle="ButtonStyle.Success"
            class="me-2"
            Disabled="@(!isManager)" />
        <RadzenButton
            Click="OpenTestRequestCreationDialog"
            Icon="add_circle_outline"
            Text="Add request"
            ButtonStyle="ButtonStyle.Primary"
            Disabled="@(!isManagerOrQA)" />
    </div>
</div>

@foreach (var status in testRequestsByStatus.Keys)
{
    var requests = testRequestsByStatus[status];
    <IndividualRow Requests="requests" Status="@status" ProjectId="@Id">
        <RowTitle>
            <RadzenText TextStyle="TextStyle.H6" class="rz-mb-0" Style="font-size: 1.1rem;" TagName="TagName.H6">@GetStatusName(status)</RadzenText>
        </RowTitle>
    </IndividualRow>
}

@code {
    [Parameter]
    public string? Id { get; set; }
    [Inject]
    protected DialogService DialogService { get; set; }

    private ProjectViewModel? project;
    private bool isManager;
    private bool isManagerOrQA;

    private Dictionary<RequestStatus, IEnumerable<TestRequestViewModel>> testRequestsByStatus = new();

    protected override async Task OnParametersSetAsync()
    {
        if (project == null || project.Id != Id)
        {
            project = await ProjectService.GetProjectByIdAsync(Id);
            testRequestsByStatus = await TestRequestService.GetTestRequestsByProjectIdGroupedByStatus(Id);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        isManager = await PolicyValidatorService.ValidatePolicyAsync(AuthorizationRoles.Manager);
        isManagerOrQA = await PolicyValidatorService.ValidatePolicyAsync($"{AuthorizationRoles.Manager}, {AuthorizationRoles.QA}");

        project = await ProjectService.GetProjectByIdAsync(Id);
        TestRequestService.OnChange += StateHasChanged;
        TestRequestService.OnTestRequestAdded += UpdateTestRequests;
        TestRequestService.OnTestRequestDeleted += UpdateTestRequests;
        TestRequestService.OnTestRequestUpdated += UpdateTestRequests;
        testRequestsByStatus = await TestRequestService.GetTestRequestsByProjectIdGroupedByStatus(Id);
    }

    private string GetStatusName(RequestStatus status)
    {
        string name = status.ToString();
        return System.Text.RegularExpressions.Regex.Replace(name, "(\\B[A-Z])", " $1");
    }

    public async Task OpenTestRequestCreationDialog()
    {
        await DialogService.OpenAsync<TestRequestCreationDialog>(
            "Create Test Request",
            new Dictionary<string, object>() { { "ProjectId", Id } },
            new DialogOptions() { Width = "700px", Height = "540px", Resizable = false, Draggable = true }
        );
    }

    public void NavigateToProjectManagementPage()
    {
        NavigationManager.NavigateTo($"/project/{Id}/manage");
    }

    public void NavigateToProjectMetricsPage()
    {
        NavigationManager.NavigateTo($"/project/{Id}/metrics");
    }

    private async void UpdateTestRequests()
    {
        testRequestsByStatus = await TestRequestService.GetTestRequestsByProjectIdGroupedByStatus(Id);
        StateHasChanged();
    }

    public void Dispose()
    {
        TestRequestService.OnChange -= StateHasChanged;
        TestRequestService.OnTestRequestAdded -= UpdateTestRequests;
        TestRequestService.OnTestRequestDeleted -= UpdateTestRequests;
        TestRequestService.OnTestRequestUpdated -= UpdateTestRequests;
    }
}
