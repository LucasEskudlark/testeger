@page "/project/{ProjectId}/metrics"
@layout DefaultLayout
@inject TestRequestService TestRequestService
@inject TestCaseService TestCaseService

<div class="container-fluid">
    <div class="row d-flex justify-content-between mb-4">
        <div class="col-auto">
            <RadzenBreadCrumb>
                <RadzenBreadCrumbItem Path="@BreadCrumbHelper.GetProjectUrl(ProjectId)" Text="Project" />
                <RadzenBreadCrumbItem Text="Metrics" />
            </RadzenBreadCrumb>
        </div>
        <div class="col-3 d-flex justify-content-end">
            <RadzenDropDown @bind-Value="selectedTimeFrame"
                            Data=@timeOptions
                            TextProperty="Text"
                            ValueProperty="Value" />
        </div>
    </div>
    @if (TestCases is null && TestRequests is null)
    {
        <div class="row mt-4 d-flex justify-content-center">
            <div class="col-12">
                <RadzenCard>
                    <h5>There are no metrics for this project yet.</h5>
                </RadzenCard>
            </div>
        </div>
    } else
    {
        <RadzenCard class="mt-4">
            <h5><strong>Test requests metrics:</strong></h5>
            <div class="row mt-5 d-flex align-items-start">
                <div class="col-6">
                    <TestRequestGeneralMetricsDatagrid TestRequests="TestRequests"/>
                </div>
                <div class="col-6">
                    <RequestTimeSpentInEachStatusChart TestRequests="TestRequests" TestRequestsByStatus="TestRequestsByStatus"/>
                </div>
            </div>

            <div class="row mt-5 d-flex justify-content-center">
                <div class="col-10">
                    <TestRequestCountPerStatusChart TestRequestsByStatus="TestRequestsByStatus"/>
                </div>
            </div>
        </RadzenCard>

        <RadzenCard class="mt-4">
            <h5><strong>Test cases metrics:</strong></h5>
            <div class="row mt-5">
                <div class="col-6">
                    <TestCaseCountPerStatusChart TestCasesByStatus="TestCasesByStatus"/>
                </div>
                <div class="col-6">
                    <TestCaseGeneralMetricsDatagrid TestCases="TestCases" TestRequests="TestRequests"/>
                </div>
            </div>

            <div class="row mt-5">
                <div class="col-12">
                    <TestCaseTimeSpentInEachStatusChart TestCasesByStatus="TestCasesByStatus" TestCases="TestCases"/>
                </div>
            </div>
        </RadzenCard>

        <RadzenCard class="mt-4">
            <h5><strong>Team metrics:</strong></h5>
            <div class="row mt-5">
                <div class="col-6">
                   <RequestCountPerProjectQAChart/>
                </div>
                <div class="col-6 pb-0">
                   <TestCaseCountPerProjectQAChart />
                </div>
            </div>
        </RadzenCard>

        <RadzenCard class="mt-4">
            <h5><strong>Individual metrics:</strong></h5>
            <div class="row mt-4">
                <IndividualProjectQAMetrics/>
            </div>
        </RadzenCard>
    }
</div>

@code {
    [Parameter]
    public string ProjectId { get; set; }

    private List<TestRequest> TestRequests { get; set; }
    private List<TestCase> TestCases { get; set; }
    private Dictionary<RequestStatus, List<TestRequest>> TestRequestsByStatus { get; set; }
    private Dictionary<TestCaseStatus, List<TestCase>> TestCasesByStatus { get; set; }

    protected override async Task OnInitializedAsync()
    {
        TestRequests = await TestRequestService.GetTestRequestsByProjectId(ProjectId);
        TestRequestsByStatus = await TestRequestService.GetTestRequestsByProjectIdGroupedByStatus(ProjectId);
        TestCasesByStatus = await TestCaseService.GetTestCasesByProjectIdGroupedByStatus(ProjectId);
        TestCases = await TestCaseService.GetTestCasesByProjectId(ProjectId);
    }

    string selectedTimeFrame = "1d";

    List<TimeOption> timeOptions = new List<TimeOption>
    {
        new TimeOption { Text = "Past 4 hours", Value = "1h" },
        new TimeOption { Text = "Past 12 hours", Value = "4h" },
        new TimeOption { Text = "Past 1 day", Value = "1d" },
        new TimeOption { Text = "Past 2 days", Value = "2d" },
        new TimeOption { Text = "Past 1 week", Value = "1w" },
        new TimeOption { Text = "Past 1 month", Value = "1M" }
    };

    public class TimeOption
    {
        public string? Text { get; set; }
        public string? Value { get; set; }
    }
}

<style>
    .right-divider {
        border-right: 1px solid #ced4da;
    }
</style>