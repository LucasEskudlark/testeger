@page "/project/{ProjectId}/metrics"
@using Testeger.Client.Models
@layout DefaultLayout
@inject ITestRequestServiceNV TestRequestService
@inject ITestCaseServiceNV TestCaseService
@inject IProjectServiceNV ProjectService
@attribute [Authorize(Policy = $"{AuthorizationRoles.Manager}")]

<PageTitle>@Project?.Name Metrics - Testeger</PageTitle>

@if (isInitialized)
{
    <div style="width: 1400px; margin: 0 auto;">
        <div style="display: flex; justify-content: space-between; margin-bottom: 40px;">
            <div style="width: 400px;">
                <RadzenBreadCrumb>
                    <RadzenBreadCrumbItem Path="@BreadCrumbHelper.GetProjectUrl(ProjectId)" Text="Project" />
                    <RadzenBreadCrumbItem Text="Metrics" />
                </RadzenBreadCrumb>
            </div>
            <div style="width: 300px; display: flex; justify-content: flex-end;">
                <RadzenDropDown TValue="DateTime?"
                                Data="FilterOptions"
                                TextProperty="Text"
                                ValueProperty="Value"
                                @bind-Value="@FilterDate"
                                Change="@(args => StateHasChanged())" />
            </div>
        </div>

        @if ((TestCases is null && TestRequests is null) || (!TestCases.Any() && !TestRequests.Any()))
        {
            <div style="margin-top: 40px; display: flex; justify-content: center;">
                <RadzenCard style="height: 400px; display: flex; align-items: center; justify-content: center;">
                    <h5 style="color: #A9ABAE;"><i>There are no metrics for this project yet.</i></h5>
                </RadzenCard>
            </div>
        }
        else
        {
            <RadzenCard style="margin: 20px 0; padding: 20px; width: 1400px;">
                <ToggleComponent>
                    <Header>
                        <RadzenText TextStyle="TextStyle.H6" style="margin-top: 20px;">Test requests metrics:</RadzenText>
                    </Header>
                    <ChildContent>
                        <div style="margin-top: 30px; display: flex;">
                            <div style="width: 600px;">
                                <TestRequestGeneralMetricsDatagrid TestRequests="TestRequests" FilterDate="FilterDate" />
                            </div>
                            <div style="width: 600px;">
                                <RequestTimeSpentInEachStatusChart TestRequests="TestRequests" TestRequestsByStatus="TestRequestsByStatus" />
                            </div>
                        </div>

                        <div style="margin-top: 40px; display: flex; justify-content: center; margin-bottom: 40px;">
                            <div style="width: 1000px;">
                                <TestRequestCountPerStatusChart TestRequestsByStatus="TestRequestsByStatus" FilterDate="FilterDate" />
                            </div>
                        </div>
                    </ChildContent>
                </ToggleComponent>
            </RadzenCard>

            <RadzenCard style="margin: 20px 0; padding: 20px; width: 1400px;">
                <ToggleComponent>
                    <Header>
                        <RadzenText TextStyle="TextStyle.H6" style="margin-top: 20px;">Test cases metrics:</RadzenText>
                    </Header>
                    <ChildContent>
                        <div style="margin-top: 30px; display: flex;">
                            <div style="width: 600px;">
                                <TestCaseCountPerStatusChart TestCasesByStatus="TestCasesByStatus" FilterDate="FilterDate" />
                            </div>
                            <div style="width: 600px;">
                                <TestCaseGeneralMetricsDatagrid TestCases="TestCases" TestRequests="TestRequests" FilterDate="FilterDate" />
                            </div>
                        </div>

                        <div style="margin-top: 40px;">
                            <TestCaseTimeSpentInEachStatusChart TestCasesByStatus="TestCasesByStatus" TestCases="TestCases" FilterDate="FilterDate" />
                        </div>
                    </ChildContent>
                </ToggleComponent>
            </RadzenCard>

            <RadzenCard style="margin: 20px 0; padding: 20px; width: 1400px;">
                <ToggleComponent>
                    <Header>
                        <RadzenText TextStyle="TextStyle.H6" style="margin-top: 20px;">Team metrics:</RadzenText>
                    </Header>
                    <ChildContent>
                        <div style="margin-top: 30px; display: flex;">
                            <div style="width: 600px;">
                                <RequestCountPerProjectQAChart TestRequests="@TestRequests" ProjectId="@ProjectId" />
                            </div>
                            <div style="width: 600px;">
                                <TestCaseCountPerProjectQAChart TestCases="@TestCases" ProjectId="@ProjectId" />
                            </div>
                        </div>
                    </ChildContent>
                </ToggleComponent>
            </RadzenCard>

            <RadzenCard style="margin: 20px 0; padding: 20px; width: 1400px;">
                <ToggleComponent>
                    <Header>
                        <RadzenText TextStyle="TextStyle.H6" style="margin-top: 20px;">Individual metrics:</RadzenText>
                    </Header>
                    <ChildContent>
                        <div style="margin-top: 30px;">
                            <IndividualProjectQAMetrics TestRequests="@TestRequests" TestCases="@TestCases" ProjectId="@ProjectId" />
                        </div>
                    </ChildContent>
                </ToggleComponent>
            </RadzenCard>
        }
    </div>
}

@code {
    [Parameter]
    public string ProjectId { get; set; }

    public DateTime? FilterDate { get; set; }
    private List<DateFilterOption> FilterOptions { get; set; }

    private ProjectViewModel Project { get; set; }
    private IEnumerable<TestRequestViewModel> TestRequests { get; set; }
    private IEnumerable<TestCaseViewModel> TestCases { get; set; }
    private Dictionary<RequestStatus, IEnumerable<TestRequestViewModel>> TestRequestsByStatus { get; set; }
    private Dictionary<TestCaseStatus, IEnumerable<TestCaseViewModel>> TestCasesByStatus { get; set; }

    private bool isInitialized;

    protected override async Task OnInitializedAsync()
    {
        Project = await ProjectService.GetProjectByIdAsync(ProjectId);
        TestRequests = await TestRequestService.GetTestRequestsByProjectIdAsync(ProjectId);
        TestRequestsByStatus = await TestRequestService.GetTestRequestsByProjectIdGroupedByStatus(ProjectId);
        TestCases = await TestCaseService.GetTestCasesByProjectIdAsync(ProjectId);
        TestCasesByStatus = await TestCaseService.GetTestCasesByProjectIdGroupedByStatus(ProjectId);

        FilterOptions = new List<DateFilterOption>
        {
            new DateFilterOption { Text = "All Time", Value = null },
            new DateFilterOption { Text = "Past Week", Value = DateTime.Now.AddDays(-7) },
            new DateFilterOption { Text = "Past Month", Value = DateTime.Now.AddMonths(-1) },
            new DateFilterOption { Text = "Past 3 Months", Value = DateTime.Now.AddMonths(-3) },
            new DateFilterOption { Text = "Past Year", Value = DateTime.Now.AddYears(-1) }
        };

        if (FilterDate is null)
        {
            FilterDate = FilterOptions.FirstOrDefault(o => o.Text == "Past Month")?.Value;
        }

        isInitialized = true;
    }
}