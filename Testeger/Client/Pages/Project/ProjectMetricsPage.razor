@page "/project/{ProjectId}/metrics"
@using Testeger.Client.Models
@layout DefaultLayout
@inject ITestRequestServiceNV TestRequestService
@inject ITestCaseServiceNV TestCaseService
@inject IProjectServiceNV ProjectService
@attribute [Authorize(Policy = $"{AuthorizationRoles.Manager}")]

<PageTitle>@Project?.Name Metrics - Testeger</PageTitle>

@if (isInitialized)
{
    <div class="container-fluid">
        <div class="row d-flex justify-content-between mb-4">
            <div class="col-auto">
                <RadzenBreadCrumb>
                    <RadzenBreadCrumbItem Path="@BreadCrumbHelper.GetProjectUrl(ProjectId)" Text="Project" />
                    <RadzenBreadCrumbItem Text="Metrics" />
                </RadzenBreadCrumb>
            </div>
            <div class="col-auto d-flex justify-content-end">
                <RadzenDropDown TValue="DateTime?"
                                Data="FilterOptions"
                                TextProperty="Text"
                                ValueProperty="Value"
                                @bind-Value="@FilterDate"
                                Change="@(args => StateHasChanged())" />
            </div>
        </div>

        @if ((TestCases is null && TestRequests is null) || (!TestCases.Any() && !TestRequests.Any()))
        {
            <div class="row mt-4 d-flex justify-content-center">
                <div class="col-12">
                    <RadzenCard class="vh-100 d-flex align-items-center justify-content-center">
                        <h5 style="color: #A9ABAE;">
                            <i>There are no metrics for this project yet.</i>
                        </h5>
                    </RadzenCard>
                </div>
            </div>
        }
        else
        {
            <RadzenCard class="my-3 py-2">
                <ToggleComponent>
                    <Header>
                        <RadzenText TextStyle="TextStyle.H6" class="mt-2">Test requests metrics:</RadzenText>
                    </Header>
                    <ChildContent>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <TestRequestGeneralMetricsDatagrid TestRequests="TestRequests" FilterDate="FilterDate" />
                            </div>
                            <div class="col-md-6">
                                <RequestTimeSpentInEachStatusChart TestRequests="TestRequests" TestRequestsByStatus="TestRequestsByStatus" />
                            </div>
                        </div>
                        <div class="row mt-4 d-flex justify-content-center mb-4">
                            <div class="col-md-10">
                                <TestRequestCountPerStatusChart TestRequestsByStatus="TestRequestsByStatus" FilterDate="FilterDate" />
                            </div>
                        </div>
                    </ChildContent>
                </ToggleComponent>
            </RadzenCard>

            <RadzenCard class="my-3 py-2">
                <ToggleComponent>
                    <Header>
                        <RadzenText TextStyle="TextStyle.H6" class="mt-2">Test cases metrics:</RadzenText>
                    </Header>
                    <ChildContent>
                        <div class="row mt-3">
                            <div class="col-md-6">
                                <TestCaseCountPerStatusChart TestCasesByStatus="TestCasesByStatus" FilterDate="FilterDate" />
                            </div>
                            <div class="col-md-6">
                                <TestCaseGeneralMetricsDatagrid TestCases="TestCases" TestRequests="TestRequests" FilterDate="FilterDate" />
                            </div>
                        </div>
                    </ChildContent>
                </ToggleComponent>
            </RadzenCard>

            <RadzenCard class="my-3 py-2">
                <ToggleComponent>
                    <Header>
                        <RadzenText TextStyle="TextStyle.H6" class="mt-2">Team metrics:</RadzenText>
                    </Header>
                    <ChildContent>
                        <div class="row mt-3 mb-4">
                            <div class="col-md-6">
                                <RequestCountPerProjectQAChart />
                            </div>
                            <div class="col-md-6">
                                <TestCaseCountPerProjectQAChart />
                            </div>
                        </div>
                    </ChildContent>
                </ToggleComponent>
            </RadzenCard>

            <RadzenCard class="my-3 py-2">
                <ToggleComponent>
                    <Header>
                        <RadzenText TextStyle="TextStyle.H6" class="mt-2">Individual metrics:</RadzenText>
                    </Header>
                    <ChildContent>
                        <div class="row mt-3 mb-4">
                            <IndividualProjectQAMetrics />
                        </div>
                    </ChildContent>
                </ToggleComponent>
            </RadzenCard>
        }
    </div>
}

@code {
    [Parameter]
    public string ProjectId { get; set; }

    public DateTime? FilterDate { get; set; }
    private List<DateFilterOption> FilterOptions { get; set; }

    private ProjectViewModel Project { get; set; }
    private IEnumerable<TestRequestViewModel> TestRequests { get; set; }
    private IEnumerable<TestCaseViewModel> TestCases { get; set; }
    private Dictionary<RequestStatus, IEnumerable<TestRequestViewModel>> TestRequestsByStatus { get; set; }
    private Dictionary<TestCaseStatus, IEnumerable<TestCaseViewModel>> TestCasesByStatus { get; set; }

    private bool isInitialized;

    protected override async Task OnInitializedAsync()
    {
        Project = await ProjectService.GetProjectByIdAsync(ProjectId);
        TestRequests = await TestRequestService.GetTestRequestsByProjectIdAsync(ProjectId);
        TestRequestsByStatus = await TestRequestService.GetTestRequestsByProjectIdGroupedByStatus(ProjectId);
        TestCases = await TestCaseService.GetTestCasesByProjectIdAsync(ProjectId);
        TestCasesByStatus = await TestCaseService.GetTestCasesByProjectIdGroupedByStatus(ProjectId);

        FilterOptions = new List<DateFilterOption>
        {
            new DateFilterOption { Text = "All Time", Value = null },
            new DateFilterOption { Text = "Past Week", Value = DateTime.Now.AddDays(-7) },
            new DateFilterOption { Text = "Past Month", Value = DateTime.Now.AddMonths(-1) },
            new DateFilterOption { Text = "Past 3 Months", Value = DateTime.Now.AddMonths(-3) },
            new DateFilterOption { Text = "Past Year", Value = DateTime.Now.AddYears(-1) }
        };

        if (FilterDate is null)
        {
            FilterDate = FilterOptions.FirstOrDefault(o => o.Text == "Past Month")?.Value;
        }

        isInitialized = true;
    }
}

<style>
    /* Ajustes globais para garantir a flexibilidade dos componentes */
    .container-fluid, .RadzenCard, .RadzenBreadCrumb {
        max-width: 100%;
        width: 100%;
        padding: 0 15px;
    }

    /* Evitar min-width fixas para que os elementos se adaptem às telas pequenas */
    .card, .row, .col-12, .col-md-6 {
        min-width: unset !important;
        width: 100% !important;
    }

    /* Definir margens flexíveis nos cards */
    .card {
        margin: 10px 0;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        border-radius: 5px;
    }

    /* Ajuste do breadcrumb e dropdown para telas pequenas */
    .breadcrumb, .dropdown {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    /* Garantir que o conteúdo dos botões e textos não seja cortado em telas pequenas */
    .radzen-text, .radzen-button {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    /* Espaçamento flexível para os grids de métricas */
    .row .col-md-6 {
        padding: 0 10px;
    }

    /* Garantir que os cards tenham espaçamento uniforme */
    .RadzenCard {
        padding: 20px;
        margin-bottom: 20px;
    }

    /* Centralizar melhor os componentes em telas pequenas */
    .d-flex {
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
    }

    /* Ajuste de altura flexível para cards vazios */
    .vh-100 {
        height: auto;
        min-height: 100vh;
    }

    /* Pequenos ajustes de margem para o cabeçalho dos componentes de Toggle */
    .RadzenText {
        margin-top: 10px;
    }

    /* Deixar charts e grids mais responsivos */
    .chart-container, .datagrid-container {
        width: 100%;
        max-width: 100%;
    }
</style>